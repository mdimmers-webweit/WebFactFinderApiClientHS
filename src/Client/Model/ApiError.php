<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\Model;

/**
 * ApiError Class Doc Comment
 *
 * @description Contains information which will be returned when an error occurs.
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ApiError extends BaseModel
{
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ApiError';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'error' => 'string',
        'error_description' => 'string',
        'stacktrace' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     */
    protected static $swaggerFormats = [
        'error' => null,
        'error_description' => null,
        'stacktrace' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error' => 'error',
        'error_description' => 'errorDescription',
        'stacktrace' => 'stacktrace',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error' => 'setError',
        'error_description' => 'setErrorDescription',
        'stacktrace' => 'setStacktrace',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error' => 'getError',
        'error_description' => 'getErrorDescription',
        'stacktrace' => 'getStacktrace',
    ];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['error'] = $data['error'] ?? null;
        $this->container['error_description'] = $data['error_description'] ?? null;
        $this->container['stacktrace'] = $data['stacktrace'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * @param string $error A short error description
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * @return string
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * @param string $error_description A description of the error cause
     *
     * @return $this
     */
    public function setErrorDescription($error_description)
    {
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getStacktrace()
    {
        return $this->container['stacktrace'];
    }

    /**
     * @param string[] $stacktrace The stacktrace from the error (will only be transmitted when the query parameter verbose=true was added to the request)
     *
     * @return $this
     */
    public function setStacktrace($stacktrace)
    {
        $this->container['stacktrace'] = $stacktrace;

        return $this;
    }
}

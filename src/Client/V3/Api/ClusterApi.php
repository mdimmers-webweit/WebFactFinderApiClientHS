<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\Exception\RequestException;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * ClusterApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ClusterApi extends ApiClient
{
    /**
     * Operation fullSyncUsingPOST
     *
     * Fully synchronize the worldmatch database of this node.
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function fullSyncUsingPOST(): void
    {
        $this->fullSyncUsingPOSTWithHttpInfo();
    }

    /**
     * Operation fullSyncUsingPOSTWithHttpInfo
     *
     * Fully synchronize the worldmatch database of this node.
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullSyncUsingPOSTWithHttpInfo()
    {
        $returnType = '';
        $request = $this->fullSyncUsingPOSTRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullSyncUsingPOSTAsync
     *
     * Fully synchronize the worldmatch database of this node.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function fullSyncUsingPOSTAsync()
    {
        return $this->fullSyncUsingPOSTAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullSyncUsingPOSTAsyncWithHttpInfo
     *
     * Fully synchronize the worldmatch database of this node.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function fullSyncUsingPOSTAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->fullSyncUsingPOSTRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getDatabaseStateUsingGET
     *
     * Show the current state of the worldmatch database.
     *
     * @param string $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\DatabaseState
     */
    public function getDatabaseStateUsingGET($channel)
    {
        list($response) = $this->getDatabaseStateUsingGETWithHttpInfo($channel);

        return $response;
    }

    /**
     * Operation getDatabaseStateUsingGETWithHttpInfo
     *
     * Show the current state of the worldmatch database.
     *
     * @param string $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\DatabaseState, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDatabaseStateUsingGETWithHttpInfo($channel)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\DatabaseState';
        $request = $this->getDatabaseStateUsingGETRequest($channel);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation getDatabaseStateUsingGETAsync
     *
     * Show the current state of the worldmatch database.
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getDatabaseStateUsingGETAsync($channel)
    {
        return $this->getDatabaseStateUsingGETAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDatabaseStateUsingGETAsyncWithHttpInfo
     *
     * Show the current state of the worldmatch database.
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getDatabaseStateUsingGETAsyncWithHttpInfo($channel)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\DatabaseState';
        $request = $this->getDatabaseStateUsingGETRequest($channel);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation pruneUsingPOST
     *
     * Prune delta updates.
     *
     * @param string $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return string
     */
    public function pruneUsingPOST($channel)
    {
        list($response) = $this->pruneUsingPOSTWithHttpInfo($channel);

        return $response;
    }

    /**
     * Operation pruneUsingPOSTWithHttpInfo
     *
     * Prune delta updates.
     *
     * @param string $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function pruneUsingPOSTWithHttpInfo($channel)
    {
        $returnType = 'string';
        $request = $this->pruneUsingPOSTRequest($channel);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation pruneUsingPOSTAsync
     *
     * Prune delta updates.
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function pruneUsingPOSTAsync($channel)
    {
        return $this->pruneUsingPOSTAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pruneUsingPOSTAsyncWithHttpInfo
     *
     * Prune delta updates.
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function pruneUsingPOSTAsyncWithHttpInfo($channel)
    {
        $returnType = 'string';
        $request = $this->pruneUsingPOSTRequest($channel);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation syncDatabaseUsingPOST
     *
     * Synchronize the worldmatch database of this node.
     *
     * @param string $channel channel (required)
     * @param bool   $verbose verbose (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\DeltaUpdateResult[]
     */
    public function syncDatabaseUsingPOST($channel, $verbose = 'false')
    {
        list($response) = $this->syncDatabaseUsingPOSTWithHttpInfo($channel, $verbose);

        return $response;
    }

    /**
     * Operation syncDatabaseUsingPOSTWithHttpInfo
     *
     * Synchronize the worldmatch database of this node.
     *
     * @param string $channel channel (required)
     * @param bool   $verbose verbose (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\DeltaUpdateResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function syncDatabaseUsingPOSTWithHttpInfo($channel, $verbose = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\DeltaUpdateResult[]';
        $request = $this->syncDatabaseUsingPOSTRequest($channel, $verbose);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 409:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncDatabaseUsingPOSTAsync
     *
     * Synchronize the worldmatch database of this node.
     *
     * @param string $channel channel (required)
     * @param bool   $verbose verbose (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function syncDatabaseUsingPOSTAsync($channel, $verbose = 'false')
    {
        return $this->syncDatabaseUsingPOSTAsyncWithHttpInfo($channel, $verbose)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncDatabaseUsingPOSTAsyncWithHttpInfo
     *
     * Synchronize the worldmatch database of this node.
     *
     * @param string $channel channel (required)
     * @param bool   $verbose verbose (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function syncDatabaseUsingPOSTAsyncWithHttpInfo($channel, $verbose = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\DeltaUpdateResult[]';
        $request = $this->syncDatabaseUsingPOSTRequest($channel, $verbose);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Create request for operation 'fullSyncUsingPOST'
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function fullSyncUsingPOSTRequest()
    {
        $resourcePath = '/rest/v3/cluster/database/sync/full';
        $queryParams = [];
        $httpBody = '';
        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getDatabaseStateUsingGET'
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function getDatabaseStateUsingGETRequest($channel)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getDatabaseStateUsingGET'
            );
        }

        $resourcePath = '/rest/v3/cluster/{channel}/database/state';
        $queryParams = [];
        $httpBody = '';
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->getQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'pruneUsingPOST'
     *
     * @param string $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function pruneUsingPOSTRequest($channel)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling pruneUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/cluster/{channel}/database/prune';
        $queryParams = [];
        $httpBody = '';
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'syncDatabaseUsingPOST'
     *
     * @param string $channel channel (required)
     * @param bool   $verbose verbose (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function syncDatabaseUsingPOSTRequest($channel, $verbose = 'false')
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling syncDatabaseUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/cluster/{channel}/database/sync';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($verbose !== null) {
            $queryParams['verbose'] = ObjectSerializer::toQueryValue($verbose);
        }

        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

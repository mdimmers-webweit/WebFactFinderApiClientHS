<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * JobsApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class JobsApi extends ApiClient
{
    /**
     * Operation startJobUsingPOST
     *
     * Start the job with the given name and group name. The job will only be started, if it is not already running.
     *
     * @param string $job_name  jobName (required)
     * @param string $job_group jobGroup (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]
     */
    public function startJobUsingPOST($job_name, $job_group)
    {
        list($response) = $this->startJobUsingPOSTWithHttpInfo($job_name, $job_group);

        return $response;
    }

    /**
     * Operation startJobUsingPOSTWithHttpInfo
     *
     * Start the job with the given name and group name. The job will only be started, if it is not already running.
     *
     * @param string $job_name  jobName (required)
     * @param string $job_group jobGroup (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startJobUsingPOSTWithHttpInfo($job_name, $job_group)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobUsingPOSTRequest($job_name, $job_group);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation startJobUsingPOSTAsync
     *
     * Start the job with the given name and group name. The job will only be started, if it is not already running.
     *
     * @param string $job_name  jobName (required)
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobUsingPOSTAsync($job_name, $job_group)
    {
        return $this->startJobUsingPOSTAsyncWithHttpInfo($job_name, $job_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startJobUsingPOSTAsyncWithHttpInfo
     *
     * Start the job with the given name and group name. The job will only be started, if it is not already running.
     *
     * @param string $job_name  jobName (required)
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobUsingPOSTAsyncWithHttpInfo($job_name, $job_group)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobUsingPOSTRequest($job_name, $job_group);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation startJobsWithGroupNameUsingPOST
     *
     * Start the jobs with the given group name. A job will only be started, if it is not already running.
     *
     * @param string $job_group jobGroup (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]
     */
    public function startJobsWithGroupNameUsingPOST($job_group)
    {
        list($response) = $this->startJobsWithGroupNameUsingPOSTWithHttpInfo($job_group);

        return $response;
    }

    /**
     * Operation startJobsWithGroupNameUsingPOSTWithHttpInfo
     *
     * Start the jobs with the given group name. A job will only be started, if it is not already running.
     *
     * @param string $job_group jobGroup (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startJobsWithGroupNameUsingPOSTWithHttpInfo($job_group)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobsWithGroupNameUsingPOSTRequest($job_group);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation startJobsWithGroupNameUsingPOSTAsync
     *
     * Start the jobs with the given group name. A job will only be started, if it is not already running.
     *
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobsWithGroupNameUsingPOSTAsync($job_group)
    {
        return $this->startJobsWithGroupNameUsingPOSTAsyncWithHttpInfo($job_group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startJobsWithGroupNameUsingPOSTAsyncWithHttpInfo
     *
     * Start the jobs with the given group name. A job will only be started, if it is not already running.
     *
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobsWithGroupNameUsingPOSTAsyncWithHttpInfo($job_group)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobsWithGroupNameUsingPOSTRequest($job_group);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation startJobsWithNameUsingPOST
     *
     * Start the jobs with the given name. A job will only be started, if it is not already running.
     *
     * @param string $job_name jobName (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]
     */
    public function startJobsWithNameUsingPOST($job_name)
    {
        list($response) = $this->startJobsWithNameUsingPOSTWithHttpInfo($job_name);

        return $response;
    }

    /**
     * Operation startJobsWithNameUsingPOSTWithHttpInfo
     *
     * Start the jobs with the given name. A job will only be started, if it is not already running.
     *
     * @param string $job_name jobName (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\JobTriggerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startJobsWithNameUsingPOSTWithHttpInfo($job_name)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobsWithNameUsingPOSTRequest($job_name);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation startJobsWithNameUsingPOSTAsync
     *
     * Start the jobs with the given name. A job will only be started, if it is not already running.
     *
     * @param string $job_name jobName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobsWithNameUsingPOSTAsync($job_name)
    {
        return $this->startJobsWithNameUsingPOSTAsyncWithHttpInfo($job_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startJobsWithNameUsingPOSTAsyncWithHttpInfo
     *
     * Start the jobs with the given name. A job will only be started, if it is not already running.
     *
     * @param string $job_name jobName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startJobsWithNameUsingPOSTAsyncWithHttpInfo($job_name)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\JobTriggerResult[]';
        $request = $this->startJobsWithNameUsingPOSTRequest($job_name);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Create request for operation 'startJobUsingPOST'
     *
     * @param string $job_name  jobName (required)
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function startJobUsingPOSTRequest($job_name, $job_group)
    {
        // verify the required parameter 'job_name' is set
        if ($job_name === null || (\is_array($job_name) && \count($job_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_name when calling startJobUsingPOST'
            );
        }
        // verify the required parameter 'job_group' is set
        if ($job_group === null || (\is_array($job_group) && \count($job_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_group when calling startJobUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/jobs/startJob';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($job_name !== null) {
            $queryParams['jobName'] = ObjectSerializer::toQueryValue($job_name);
        }
        // query params
        if ($job_group !== null) {
            $queryParams['jobGroup'] = ObjectSerializer::toQueryValue($job_group);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'startJobsWithGroupNameUsingPOST'
     *
     * @param string $job_group jobGroup (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function startJobsWithGroupNameUsingPOSTRequest($job_group)
    {
        // verify the required parameter 'job_group' is set
        if ($job_group === null || (\is_array($job_group) && \count($job_group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_group when calling startJobsWithGroupNameUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/jobs/startJobsWithGroupName';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($job_group !== null) {
            $queryParams['jobGroup'] = ObjectSerializer::toQueryValue($job_group);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'startJobsWithNameUsingPOST'
     *
     * @param string $job_name jobName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function startJobsWithNameUsingPOSTRequest($job_name)
    {
        // verify the required parameter 'job_name' is set
        if ($job_name === null || (\is_array($job_name) && \count($job_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_name when calling startJobsWithNameUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/jobs/startJobsWithName';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($job_name !== null) {
            $queryParams['jobName'] = ObjectSerializer::toQueryValue($job_name);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

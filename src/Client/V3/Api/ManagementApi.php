<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\Exception\RequestException;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * ManagementApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ManagementApi extends ApiClient
{
    /**
     * Operation changeLogLevelUsingPOST
     *
     * Changes the log level
     *
     * @param string $log_level logLevel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function changeLogLevelUsingPOST($log_level): void
    {
        $this->changeLogLevelUsingPOSTWithHttpInfo($log_level);
    }

    /**
     * Operation changeLogLevelUsingPOSTWithHttpInfo
     *
     * Changes the log level
     *
     * @param string $log_level logLevel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeLogLevelUsingPOSTWithHttpInfo($log_level)
    {
        $returnType = '';
        $request = $this->changeLogLevelUsingPOSTRequest($log_level);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeLogLevelUsingPOSTAsync
     *
     * Changes the log level
     *
     * @param string $log_level logLevel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function changeLogLevelUsingPOSTAsync($log_level)
    {
        return $this->changeLogLevelUsingPOSTAsyncWithHttpInfo($log_level)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeLogLevelUsingPOSTAsyncWithHttpInfo
     *
     * Changes the log level
     *
     * @param string $log_level logLevel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function changeLogLevelUsingPOSTAsyncWithHttpInfo($log_level)
    {
        $returnType = '';
        $request = $this->changeLogLevelUsingPOSTRequest($log_level);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation deployUsingPOST
     *
     * Deploy resources
     *
     * @param string[] $channel channel (required)
     * @param string[] $type    type (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\MessagesWithChannel[]
     */
    public function deployUsingPOST($channel, $type)
    {
        list($response) = $this->deployUsingPOSTWithHttpInfo($channel, $type);

        return $response;
    }

    /**
     * Operation deployUsingPOSTWithHttpInfo
     *
     * Deploy resources
     *
     * @param string[] $channel channel (required)
     * @param string[] $type    type (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\MessagesWithChannel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deployUsingPOSTWithHttpInfo($channel, $type)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\MessagesWithChannel[]';
        $request = $this->deployUsingPOSTRequest($channel, $type);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation deployUsingPOSTAsync
     *
     * Deploy resources
     *
     * @param string[] $channel channel (required)
     * @param string[] $type    type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function deployUsingPOSTAsync($channel, $type)
    {
        return $this->deployUsingPOSTAsyncWithHttpInfo($channel, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deployUsingPOSTAsyncWithHttpInfo
     *
     * Deploy resources
     *
     * @param string[] $channel channel (required)
     * @param string[] $type    type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function deployUsingPOSTAsyncWithHttpInfo($channel, $type)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\MessagesWithChannel[]';
        $request = $this->deployUsingPOSTRequest($channel, $type);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation flushCacheUsingPOST
     *
     * Flush the cache
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function flushCacheUsingPOST($channel = null): void
    {
        $this->flushCacheUsingPOSTWithHttpInfo($channel);
    }

    /**
     * Operation flushCacheUsingPOSTWithHttpInfo
     *
     * Flush the cache
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function flushCacheUsingPOSTWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->flushCacheUsingPOSTRequest($channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation flushCacheUsingPOSTAsync
     *
     * Flush the cache
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function flushCacheUsingPOSTAsync($channel = null)
    {
        return $this->flushCacheUsingPOSTAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation flushCacheUsingPOSTAsyncWithHttpInfo
     *
     * Flush the cache
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function flushCacheUsingPOSTAsyncWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->flushCacheUsingPOSTRequest($channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation flushLogsUsingPOST
     *
     * Flush the log files
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function flushLogsUsingPOST(): void
    {
        $this->flushLogsUsingPOSTWithHttpInfo();
    }

    /**
     * Operation flushLogsUsingPOSTWithHttpInfo
     *
     * Flush the log files
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function flushLogsUsingPOSTWithHttpInfo()
    {
        $returnType = '';
        $request = $this->flushLogsUsingPOSTRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation flushLogsUsingPOSTAsync
     *
     * Flush the log files
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function flushLogsUsingPOSTAsync()
    {
        return $this->flushLogsUsingPOSTAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation flushLogsUsingPOSTAsyncWithHttpInfo
     *
     * Flush the log files
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function flushLogsUsingPOSTAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->flushLogsUsingPOSTRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getExpirationMessagesUsingGET
     *
     * Get expiration messages
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V3\Model\ExpirationMessage[]
     */
    public function getExpirationMessagesUsingGET($channel = null)
    {
        list($response) = $this->getExpirationMessagesUsingGETWithHttpInfo($channel);

        return $response;
    }

    /**
     * Operation getExpirationMessagesUsingGETWithHttpInfo
     *
     * Get expiration messages
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V3\Model\ExpirationMessage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpirationMessagesUsingGETWithHttpInfo($channel = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\ExpirationMessage[]';
        $request = $this->getExpirationMessagesUsingGETRequest($channel);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation getExpirationMessagesUsingGETAsync
     *
     * Get expiration messages
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getExpirationMessagesUsingGETAsync($channel = null)
    {
        return $this->getExpirationMessagesUsingGETAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpirationMessagesUsingGETAsyncWithHttpInfo
     *
     * Get expiration messages
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getExpirationMessagesUsingGETAsyncWithHttpInfo($channel = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V3\Model\ExpirationMessage[]';
        $request = $this->getExpirationMessagesUsingGETRequest($channel);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation resetLogLevelUsingPOST
     *
     * Resets the log level to the original level
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function resetLogLevelUsingPOST(): void
    {
        $this->resetLogLevelUsingPOSTWithHttpInfo();
    }

    /**
     * Operation resetLogLevelUsingPOSTWithHttpInfo
     *
     * Resets the log level to the original level
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetLogLevelUsingPOSTWithHttpInfo()
    {
        $returnType = '';
        $request = $this->resetLogLevelUsingPOSTRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetLogLevelUsingPOSTAsync
     *
     * Resets the log level to the original level
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function resetLogLevelUsingPOSTAsync()
    {
        return $this->resetLogLevelUsingPOSTAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetLogLevelUsingPOSTAsyncWithHttpInfo
     *
     * Resets the log level to the original level
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function resetLogLevelUsingPOSTAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->resetLogLevelUsingPOSTRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeLogLevelUsingPOST'
     *
     * @param string $log_level logLevel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function changeLogLevelUsingPOSTRequest($log_level)
    {
        // verify the required parameter 'log_level' is set
        if ($log_level === null || (\is_array($log_level) && \count($log_level) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $log_level when calling changeLogLevelUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/management/changeLogLevel';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($log_level !== null) {
            $queryParams['logLevel'] = ObjectSerializer::toQueryValue($log_level);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'deployUsingPOST'
     *
     * @param string[] $channel channel (required)
     * @param string[] $type    type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function deployUsingPOSTRequest($channel, $type)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling deployUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (\is_array($type) && \count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling deployUsingPOST'
            );
        }

        $resourcePath = '/rest/v3/management/deploy';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }
        // query params
        if (\is_array($type)) {
            $queryParams['type'] = $type;
        } elseif ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'flushCacheUsingPOST'
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function flushCacheUsingPOSTRequest($channel = null)
    {
        $resourcePath = '/rest/v3/management/flushCache';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'flushLogsUsingPOST'
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function flushLogsUsingPOSTRequest()
    {
        $resourcePath = '/rest/v3/management/flushLogs';
        $queryParams = [];
        $httpBody = '';
        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getExpirationMessagesUsingGET'
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function getExpirationMessagesUsingGETRequest($channel = null)
    {
        $resourcePath = '/rest/v3/management/expiration';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }

        return $this->getQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'resetLogLevelUsingPOST'
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function resetLogLevelUsingPOSTRequest()
    {
        $resourcePath = '/rest/v3/management/resetLogLevel';
        $queryParams = [];
        $httpBody = '';
        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

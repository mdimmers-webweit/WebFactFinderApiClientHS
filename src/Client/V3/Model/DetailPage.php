<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Model;

use Web\FactFinderApi\Client\Model\ModelInterface;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * DetailPage Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class DetailPage implements ModelInterface, \ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DetailPage';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'campaigns' => '\Web\FactFinderApi\Client\V3\Model\Campaign[]',
        'field_roles' => 'map[string,string]',
        'recommendations' => '\Web\FactFinderApi\Client\V3\Model\RecommendationResult',
        'record' => '\Web\FactFinderApi\Client\V3\Model\RecordWithId',
        'similar_products' => '\Web\FactFinderApi\Client\V3\Model\SimilarProducts',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'campaigns' => null,
        'field_roles' => null,
        'recommendations' => null,
        'record' => null,
        'similar_products' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaigns' => 'campaigns',
        'field_roles' => 'fieldRoles',
        'recommendations' => 'recommendations',
        'record' => 'record',
        'similar_products' => 'similarProducts',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaigns' => 'setCampaigns',
        'field_roles' => 'setFieldRoles',
        'recommendations' => 'setRecommendations',
        'record' => 'setRecord',
        'similar_products' => 'setSimilarProducts',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaigns' => 'getCampaigns',
        'field_roles' => 'getFieldRoles',
        'recommendations' => 'getRecommendations',
        'record' => 'getRecord',
        'similar_products' => 'getSimilarProducts',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['campaigns'] = $data['campaigns'] ?? null;
        $this->container['field_roles'] = $data['field_roles'] ?? null;
        $this->container['recommendations'] = $data['recommendations'] ?? null;
        $this->container['record'] = $data['record'] ?? null;
        $this->container['similar_products'] = $data['similar_products'] ?? null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['field_roles'] === null) {
            $invalidProperties[] = "'field_roles' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\Campaign[]
     */
    public function getCampaigns()
    {
        return $this->container['campaigns'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\Campaign[] $campaigns active campaigns for the product with the requested ID
     *
     * @return $this
     */
    public function setCampaigns($campaigns)
    {
        $this->container['campaigns'] = $campaigns;

        return $this;
    }

    /**
     * @return map[string,string]
     */
    public function getFieldRoles()
    {
        return $this->container['field_roles'];
    }

    /**
     * @param map[string,string] $field_roles A field to role mapping. For example, a field role may be 'brand', meaning that the field contains the manufacturer's name. (key = field role, value = field name)
     *
     * @return $this
     */
    public function setFieldRoles($field_roles)
    {
        $this->container['field_roles'] = $field_roles;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\RecommendationResult
     */
    public function getRecommendations()
    {
        return $this->container['recommendations'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\RecommendationResult $recommendations recommendations for the product with the requested ID
     *
     * @return $this
     */
    public function setRecommendations($recommendations)
    {
        $this->container['recommendations'] = $recommendations;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\RecordWithId
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\RecordWithId $record product record for the requested product ID
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\SimilarProducts
     */
    public function getSimilarProducts()
    {
        return $this->container['similar_products'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\SimilarProducts $similar_products products similar to the product with the requested ID
     *
     * @return $this
     */
    public function setSimilarProducts($similar_products)
    {
        $this->container['similar_products'] = $similar_products;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * @param int $offset Offset
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
}

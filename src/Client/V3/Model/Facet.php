<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Model;

use Web\FactFinderApi\Client\Model\ModelInterface;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * Facet Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Facet implements ModelInterface, \ArrayAccess
{
    const DISCRIMINATOR = null;

    const FILTER_STYLE__DEFAULT = 'DEFAULT';
    const FILTER_STYLE_SLIDER = 'SLIDER';
    const FILTER_STYLE_MULTISELECT = 'MULTISELECT';
    const FILTER_STYLE_TREE = 'TREE';
    const SELECTION_TYPE_SINGLE_HIDE_UNSELECTED = 'singleHideUnselected';
    const SELECTION_TYPE_SINGLE_SHOW_UNSELECTED = 'singleShowUnselected';
    const SELECTION_TYPE_MULTI_SELECT_OR = 'multiSelectOr';
    const SELECTION_TYPE_MULTI_SELECT_AND = 'multiSelectAnd';
    const TYPE_FLOAT = 'FLOAT';
    const TYPE_INTEGER = 'INTEGER';
    const TYPE_MULTI = 'MULTI';
    const TYPE_TEXT = 'TEXT';
    const TYPE_CATEGORY_PATH = 'CATEGORY_PATH';
    const TYPE_BOOLEAN = 'BOOLEAN';
    const TYPE_DATE = 'DATE';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Facet';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'detailed_links' => 'int',
        'elements' => '\Web\FactFinderApi\Client\V3\Model\FacetElement[]',
        'filter_style' => 'string',
        'name' => 'string',
        'selected_elements' => '\Web\FactFinderApi\Client\V3\Model\FacetElement[]',
        'selection_type' => 'string',
        'show_preview_images' => 'bool',
        'type' => 'string',
        'unit' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'detailed_links' => 'int32',
        'elements' => null,
        'filter_style' => null,
        'name' => null,
        'selected_elements' => null,
        'selection_type' => null,
        'show_preview_images' => null,
        'type' => null,
        'unit' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detailed_links' => 'detailedLinks',
        'elements' => 'elements',
        'filter_style' => 'filterStyle',
        'name' => 'name',
        'selected_elements' => 'selectedElements',
        'selection_type' => 'selectionType',
        'show_preview_images' => 'showPreviewImages',
        'type' => 'type',
        'unit' => 'unit',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detailed_links' => 'setDetailedLinks',
        'elements' => 'setElements',
        'filter_style' => 'setFilterStyle',
        'name' => 'setName',
        'selected_elements' => 'setSelectedElements',
        'selection_type' => 'setSelectionType',
        'show_preview_images' => 'setShowPreviewImages',
        'type' => 'setType',
        'unit' => 'setUnit',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detailed_links' => 'getDetailedLinks',
        'elements' => 'getElements',
        'filter_style' => 'getFilterStyle',
        'name' => 'getName',
        'selected_elements' => 'getSelectedElements',
        'selection_type' => 'getSelectionType',
        'show_preview_images' => 'getShowPreviewImages',
        'type' => 'getType',
        'unit' => 'getUnit',
    ];

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['detailed_links'] = $data['detailed_links'] ?? null;
        $this->container['elements'] = $data['elements'] ?? null;
        $this->container['filter_style'] = $data['filter_style'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['selected_elements'] = $data['selected_elements'] ?? null;
        $this->container['selection_type'] = $data['selection_type'] ?? null;
        $this->container['show_preview_images'] = $data['show_preview_images'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (\defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return \json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterStyleAllowableValues()
    {
        return [
            self::FILTER_STYLE__DEFAULT,
            self::FILTER_STYLE_SLIDER,
            self::FILTER_STYLE_MULTISELECT,
            self::FILTER_STYLE_TREE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSelectionTypeAllowableValues()
    {
        return [
            self::SELECTION_TYPE_SINGLE_HIDE_UNSELECTED,
            self::SELECTION_TYPE_SINGLE_SHOW_UNSELECTED,
            self::SELECTION_TYPE_MULTI_SELECT_OR,
            self::SELECTION_TYPE_MULTI_SELECT_AND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FLOAT,
            self::TYPE_INTEGER,
            self::TYPE_MULTI,
            self::TYPE_TEXT,
            self::TYPE_CATEGORY_PATH,
            self::TYPE_BOOLEAN,
            self::TYPE_DATE,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['detailed_links'] === null) {
            $invalidProperties[] = "'detailed_links' can't be null";
        }
        if ($this->container['elements'] === null) {
            $invalidProperties[] = "'elements' can't be null";
        }
        if ($this->container['filter_style'] === null) {
            $invalidProperties[] = "'filter_style' can't be null";
        }
        $allowedValues = $this->getFilterStyleAllowableValues();
        if (!\is_null($this->container['filter_style']) && !\in_array($this->container['filter_style'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'filter_style', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        if ($this->container['selected_elements'] === null) {
            $invalidProperties[] = "'selected_elements' can't be null";
        }
        if ($this->container['selection_type'] === null) {
            $invalidProperties[] = "'selection_type' can't be null";
        }
        $allowedValues = $this->getSelectionTypeAllowableValues();
        if (!\is_null($this->container['selection_type']) && !\in_array($this->container['selection_type'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'selection_type', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        if ($this->container['show_preview_images'] === null) {
            $invalidProperties[] = "'show_preview_images' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!\is_null($this->container['type']) && !\in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'type', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * @return int
     */
    public function getDetailedLinks()
    {
        return $this->container['detailed_links'];
    }

    /**
     * @param int $detailed_links number of links to be displayed (for the selection menu)
     *
     * @return $this
     */
    public function setDetailedLinks($detailed_links)
    {
        $this->container['detailed_links'] = $detailed_links;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\FacetElement[]
     */
    public function getElements()
    {
        return $this->container['elements'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\FacetElement[] $elements the elements shown in the filter
     *
     * @return $this
     */
    public function setElements($elements)
    {
        $this->container['elements'] = $elements;

        return $this;
    }

    /**
     * @return string
     */
    public function getFilterStyle()
    {
        return $this->container['filter_style'];
    }

    /**
     * @param string $filter_style the style in which the filter should be displayed
     *
     * @return $this
     */
    public function setFilterStyle($filter_style)
    {
        $allowedValues = $this->getFilterStyleAllowableValues();
        if (!\in_array($filter_style, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'filter_style', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter_style'] = $filter_style;

        return $this;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * @param string $name filter name that should be displayed to the user
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\FacetElement[]
     */
    public function getSelectedElements()
    {
        return $this->container['selected_elements'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\FacetElement[] $selected_elements the elements of the filter that are currently selected
     *
     * @return $this
     */
    public function setSelectedElements($selected_elements)
    {
        $this->container['selected_elements'] = $selected_elements;

        return $this;
    }

    /**
     * @return string
     */
    public function getSelectionType()
    {
        return $this->container['selection_type'];
    }

    /**
     * @param string $selection_type defines the way this filter behaves when elements are selected
     *
     * @return $this
     */
    public function setSelectionType($selection_type)
    {
        $allowedValues = $this->getSelectionTypeAllowableValues();
        if (!\in_array($selection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'selection_type', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['selection_type'] = $selection_type;

        return $this;
    }

    /**
     * @return bool
     */
    public function getShowPreviewImages()
    {
        return $this->container['show_preview_images'];
    }

    /**
     * @param bool $show_preview_images if true, preview images should be displayed to the user
     *
     * @return $this
     */
    public function setShowPreviewImages($show_preview_images)
    {
        $this->container['show_preview_images'] = $show_preview_images;

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * @param string $type the type of the filter elements
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!\is_null($type) && !\in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * @param string $unit the units to be shown, if filter elements represent (for instance) length, or weight
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * @param int $offset Offset
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (\is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
}

<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Model;

use Web\FactFinderApi\Client\Model\SearchParamsBase;

/**
 * SearchParams Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SearchParams extends SearchParamsBase
{
    const ARTICLE_NUMBER_SEARCH_DETECT = 'DETECT';
    const ARTICLE_NUMBER_SEARCH_ALWAYS = 'ALWAYS';
    const ARTICLE_NUMBER_SEARCH_NEVER = 'NEVER';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SearchParams';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'advisor_status' => '\Web\FactFinderApi\Client\V3\Model\AdvisorCampaignStatusHolder',
        'article_number_search' => 'string',
        'channel' => 'string',
        'custom_parameters' => '\Web\FactFinderApi\Client\V3\Model\CustomParameter[]',
        'filters' => '\Web\FactFinderApi\Client\V3\Model\Filter[]',
        'hits_per_page' => 'int',
        'location' => '\Web\FactFinderApi\Client\V3\Model\Location',
        'market_id' => '\Web\FactFinderApi\Client\V3\Model\Filter',
        'max_count_variants' => 'int',
        'page' => 'int',
        'query' => 'string',
        'search_field' => 'string',
        'sort_items' => '\Web\FactFinderApi\Client\V3\Model\SortItem[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'advisor_status' => null,
        'article_number_search' => null,
        'channel' => null,
        'custom_parameters' => null,
        'filters' => null,
        'hits_per_page' => 'int32',
        'location' => null,
        'market_id' => null,
        'max_count_variants' => 'int32',
        'page' => 'int32',
        'query' => null,
        'search_field' => null,
        'sort_items' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advisor_status' => 'advisorStatus',
        'article_number_search' => 'articleNumberSearch',
        'channel' => 'channel',
        'custom_parameters' => 'customParameters',
        'filters' => 'filters',
        'hits_per_page' => 'hitsPerPage',
        'location' => 'location',
        'market_id' => 'marketId',
        'max_count_variants' => 'maxCountVariants',
        'page' => 'page',
        'query' => 'query',
        'search_field' => 'searchField',
        'sort_items' => 'sortItems',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advisor_status' => 'setAdvisorStatus',
        'article_number_search' => 'setArticleNumberSearch',
        'channel' => 'setChannel',
        'custom_parameters' => 'setCustomParameters',
        'filters' => 'setFilters',
        'hits_per_page' => 'setHitsPerPage',
        'location' => 'setLocation',
        'market_id' => 'setMarketId',
        'max_count_variants' => 'setMaxCountVariants',
        'page' => 'setPage',
        'query' => 'setQuery',
        'search_field' => 'setSearchField',
        'sort_items' => 'setSortItems',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advisor_status' => 'getAdvisorStatus',
        'article_number_search' => 'getArticleNumberSearch',
        'channel' => 'getChannel',
        'custom_parameters' => 'getCustomParameters',
        'filters' => 'getFilters',
        'hits_per_page' => 'getHitsPerPage',
        'location' => 'getLocation',
        'market_id' => 'getMarketId',
        'max_count_variants' => 'getMaxCountVariants',
        'page' => 'getPage',
        'query' => 'getQuery',
        'search_field' => 'getSearchField',
        'sort_items' => 'getSortItems',
    ];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        parent::__construct($data);
        $this->container['article_number_search'] = $data['article_number_search'] ?? null;
        $this->container['hits_per_page'] = $data['hits_per_page'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['market_id'] = $data['market_id'] ?? null;
        $this->container['max_count_variants'] = $data['max_count_variants'] ?? null;
        $this->container['sort_items'] = $data['sort_items'] ?? null;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArticleNumberSearchAllowableValues()
    {
        return [
            self::ARTICLE_NUMBER_SEARCH_DETECT,
            self::ARTICLE_NUMBER_SEARCH_ALWAYS,
            self::ARTICLE_NUMBER_SEARCH_NEVER,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getArticleNumberSearchAllowableValues();
        if (!\is_null($this->container['article_number_search']) && !\in_array($this->container['article_number_search'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'article_number_search', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if (!\is_null($this->container['hits_per_page']) && ($this->container['hits_per_page'] < 0)) {
            $invalidProperties[] = "invalid value for 'hits_per_page', must be bigger than or equal to 0.";
        }

        if (!\is_null($this->container['page']) && ($this->container['page'] < 1)) {
            $invalidProperties[] = "invalid value for 'page', must be bigger than or equal to 1.";
        }

        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\AdvisorCampaignStatusHolder
     */
    public function getAdvisorStatus()
    {
        return $this->container['advisor_status'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\AdvisorCampaignStatusHolder $advisor_status describes the advisor campaign that is currently active
     *
     * @return $this
     */
    public function setAdvisorStatus($advisor_status)
    {
        $this->container['advisor_status'] = $advisor_status;

        return $this;
    }

    /**
     * @return string
     */
    public function getArticleNumberSearch()
    {
        return $this->container['article_number_search'];
    }

    /**
     * @param string $article_number_search specifies if the search term should be interpreted as article number
     *
     * @return $this
     */
    public function setArticleNumberSearch($article_number_search)
    {
        $allowedValues = $this->getArticleNumberSearchAllowableValues();
        if (!\is_null($article_number_search) && !\in_array($article_number_search, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'article_number_search', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['article_number_search'] = $article_number_search;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\CustomParameter[]
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\CustomParameter[] $custom_parameters may be used to provide custom parameters, such as for custom classes
     *
     * @return $this
     */
    public function setCustomParameters($custom_parameters)
    {
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\Filter[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\Filter[] $filters the filters to limit the search result
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * @return int
     */
    public function getHitsPerPage()
    {
        return $this->container['hits_per_page'];
    }

    /**
     * @param int $hits_per_page number of products on a single page
     *
     * @return $this
     */
    public function setHitsPerPage($hits_per_page)
    {
        if (!\is_null($hits_per_page) && ($hits_per_page < 0)) {
            throw new \InvalidArgumentException('invalid value for $hits_per_page when calling SearchParams., must be bigger than or equal to 0.');
        }

        $this->container['hits_per_page'] = $hits_per_page;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\Location $location the location of the search user
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\Filter
     */
    public function getMarketId()
    {
        return $this->container['market_id'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\Filter $market_id The special filter on market Id. Filters products based on the id of the markets the product is related to.
     *
     * @return $this
     */
    public function setMarketId($market_id)
    {
        $this->container['market_id'] = $market_id;

        return $this;
    }

    /**
     * @return int
     */
    public function getMaxCountVariants()
    {
        return $this->container['max_count_variants'];
    }

    /**
     * @param int $max_count_variants defines the maximum number of variants to be returned in the result
     *
     * @return $this
     */
    public function setMaxCountVariants($max_count_variants)
    {
        $this->container['max_count_variants'] = $max_count_variants;

        return $this;
    }

    /**
     * @param int $page the page to be requested within the search result
     *
     * @return $this
     */
    public function setPage($page)
    {
        if (!\is_null($page) && ($page < 1)) {
            throw new \InvalidArgumentException('invalid value for $page when calling SearchParams., must be bigger than or equal to 1.');
        }

        $this->container['page'] = $page;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\SortItem[]
     */
    public function getSortItems()
    {
        return $this->container['sort_items'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\SortItem[] $sort_items specifies the sort order for the search result
     *
     * @return $this
     */
    public function setSortItems($sort_items)
    {
        $this->container['sort_items'] = $sort_items;

        return $this;
    }
}

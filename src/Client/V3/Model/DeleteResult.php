<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V3
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V3\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * DeleteResult Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class DeleteResult extends BaseModel
{
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DeleteResult';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'error' => '\Web\FactFinderApi\Client\V3\Model\ErrorDescription',
        'record_id' => 'string',
        'success' => 'bool',
        'warnings' => '\Web\FactFinderApi\Client\V3\Model\ErrorDescription[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     */
    protected static $swaggerFormats = [
        'error' => null,
        'record_id' => null,
        'success' => null,
        'warnings' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error' => 'error',
        'record_id' => 'recordId',
        'success' => 'success',
        'warnings' => 'warnings',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error' => 'setError',
        'record_id' => 'setRecordId',
        'success' => 'setSuccess',
        'warnings' => 'setWarnings',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error' => 'getError',
        'record_id' => 'getRecordId',
        'success' => 'getSuccess',
        'warnings' => 'getWarnings',
    ];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['error'] = $data['error'] ?? null;
        $this->container['record_id'] = $data['record_id'] ?? null;
        $this->container['success'] = $data['success'] ?? null;
        $this->container['warnings'] = $data['warnings'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\ErrorDescription
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\ErrorDescription $error A description of the error in case of failure. The property is present if and only if success=false.
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * @return string
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * @param string $record_id the id of the record which should be deleted
     *
     * @return $this
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * @param bool $success If true, the operation succeeded. Otherwise an error occurred which will be described in the error field.
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V3\Model\ErrorDescription[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V3\Model\ErrorDescription[] $warnings a list of all warnings
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }
}

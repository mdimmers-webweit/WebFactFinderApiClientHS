<?php
declare(strict_types=1);
/*
 * FACT-Finder
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V70
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V70\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * CompareAttribute Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CompareAttribute extends BaseModel implements ModelV70Interface
{
    /**
     * Array of property to type mappings. Used for (de)serialization
     */
    public static function swaggerTypes(): array
    {
        return [
            'attribute_name' => 'string',
            'different' => 'bool',
            'source_field' => 'string',
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     */
    public static function attributeMap(): array
    {
        return [
            'attribute_name' => 'attributeName',
            'different' => 'different',
            'source_field' => 'sourceField',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['attribute_name'] === null) {
            $invalidProperties[] = "'attribute_name' can't be null";
        }
        if ($this->container['different'] === null) {
            $invalidProperties[] = "'different' can't be null";
        }
        if ($this->container['source_field'] === null) {
            $invalidProperties[] = "'source_field' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string
     */
    public function getAttributeName()
    {
        return $this->container['attribute_name'];
    }

    /**
     * @param string $attribute_name attribute_name
     *
     * @return $this
     */
    public function setAttributeName($attribute_name)
    {
        $this->container['attribute_name'] = $attribute_name;

        return $this;
    }

    /**
     * @return bool
     */
    public function getDifferent()
    {
        return $this->container['different'];
    }

    /**
     * @param bool $different different
     *
     * @return $this
     */
    public function setDifferent($different)
    {
        $this->container['different'] = $different;

        return $this;
    }

    /**
     * @return string
     */
    public function getSourceField()
    {
        return $this->container['source_field'];
    }

    /**
     * @param string $source_field source_field
     *
     * @return $this
     */
    public function setSourceField($source_field)
    {
        $this->container['source_field'] = $source_field;

        return $this;
    }
}

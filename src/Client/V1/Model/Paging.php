<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * Paging Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Paging extends BaseModel
{
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    public static function swaggerTypes(): array
    {
        return [
            'current_page' => 'int',
            'first_link' => '\Web\FactFinderApi\Client\V1\Model\PageLink',
            'last_link' => '\Web\FactFinderApi\Client\V1\Model\PageLink',
            'next_link' => '\Web\FactFinderApi\Client\V1\Model\PageLink',
            'page_count' => 'int',
            'page_links' => '\Web\FactFinderApi\Client\V1\Model\PageLink[]',
            'paging_config' => '\Web\FactFinderApi\Client\V1\Model\PagingConfiguration',
            'previous_link' => '\Web\FactFinderApi\Client\V1\Model\PageLink',
            'results_per_page' => 'int',
        ];
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function swaggerFormats(): array
    {
        return [
            'current_page' => 'int32',
            'first_link' => null,
            'last_link' => null,
            'next_link' => null,
            'page_count' => 'int32',
            'page_links' => null,
            'paging_config' => null,
            'previous_link' => null,
            'results_per_page' => 'int32',
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    public static function attributeMap(): array
    {
        return [
            'current_page' => 'currentPage',
            'first_link' => 'firstLink',
            'last_link' => 'lastLink',
            'next_link' => 'nextLink',
            'page_count' => 'pageCount',
            'page_links' => 'pageLinks',
            'paging_config' => 'pagingConfig',
            'previous_link' => 'previousLink',
            'results_per_page' => 'resultsPerPage',
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    public static function setters(): array
    {
        return [
            'current_page' => 'setCurrentPage',
            'first_link' => 'setFirstLink',
            'last_link' => 'setLastLink',
            'next_link' => 'setNextLink',
            'page_count' => 'setPageCount',
            'page_links' => 'setPageLinks',
            'paging_config' => 'setPagingConfig',
            'previous_link' => 'setPreviousLink',
            'results_per_page' => 'setResultsPerPage',
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    public static function getters(): array
    {
        return [
            'current_page' => 'getCurrentPage',
            'first_link' => 'getFirstLink',
            'last_link' => 'getLastLink',
            'next_link' => 'getNextLink',
            'page_count' => 'getPageCount',
            'page_links' => 'getPageLinks',
            'paging_config' => 'getPagingConfig',
            'previous_link' => 'getPreviousLink',
            'results_per_page' => 'getResultsPerPage',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['current_page'] === null) {
            $invalidProperties[] = "'current_page' can't be null";
        }
        if ($this->container['page_count'] === null) {
            $invalidProperties[] = "'page_count' can't be null";
        }
        if ($this->container['results_per_page'] === null) {
            $invalidProperties[] = "'results_per_page' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * @param int $current_page current_page
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PageLink
     */
    public function getFirstLink()
    {
        return $this->container['first_link'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PageLink $first_link first_link
     *
     * @return $this
     */
    public function setFirstLink($first_link)
    {
        $this->container['first_link'] = $first_link;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PageLink
     */
    public function getLastLink()
    {
        return $this->container['last_link'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PageLink $last_link last_link
     *
     * @return $this
     */
    public function setLastLink($last_link)
    {
        $this->container['last_link'] = $last_link;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PageLink
     */
    public function getNextLink()
    {
        return $this->container['next_link'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PageLink $next_link next_link
     *
     * @return $this
     */
    public function setNextLink($next_link)
    {
        $this->container['next_link'] = $next_link;

        return $this;
    }

    /**
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * @param int $page_count page_count
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PageLink[]
     */
    public function getPageLinks()
    {
        return $this->container['page_links'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PageLink[] $page_links page_links
     *
     * @return $this
     */
    public function setPageLinks($page_links)
    {
        $this->container['page_links'] = $page_links;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PagingConfiguration
     */
    public function getPagingConfig()
    {
        return $this->container['paging_config'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PagingConfiguration $paging_config paging_config
     *
     * @return $this
     */
    public function setPagingConfig($paging_config)
    {
        $this->container['paging_config'] = $paging_config;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PageLink
     */
    public function getPreviousLink()
    {
        return $this->container['previous_link'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PageLink $previous_link previous_link
     *
     * @return $this
     */
    public function setPreviousLink($previous_link)
    {
        $this->container['previous_link'] = $previous_link;

        return $this;
    }

    /**
     * @return int
     */
    public function getResultsPerPage()
    {
        return $this->container['results_per_page'];
    }

    /**
     * @param int $results_per_page results_per_page
     *
     * @return $this
     */
    public function setResultsPerPage($results_per_page)
    {
        $this->container['results_per_page'] = $results_per_page;

        return $this;
    }
}

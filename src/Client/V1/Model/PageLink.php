<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * PageLink Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PageLink extends BaseModel
{
    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['caption'] = $data['caption'] ?? null;
        $this->container['current_page'] = $data['current_page'] ?? null;
        $this->container['number'] = $data['number'] ?? null;
        $this->container['search_params'] = $data['search_params'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    public static function swaggerTypes(): array
    {
        return [
            'caption' => 'string',
            'current_page' => 'bool',
            'number' => 'int',
            'search_params' => '\Web\FactFinderApi\Client\V1\Model\Params',
        ];
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function swaggerFormats(): array
    {
        return [
            'caption' => null,
            'current_page' => null,
            'number' => 'int32',
            'search_params' => null,
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    public static function attributeMap(): array
    {
        return [
            'caption' => 'caption',
            'current_page' => 'currentPage',
            'number' => 'number',
            'search_params' => 'searchParams',
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    public static function setters(): array
    {
        return [
            'caption' => 'setCaption',
            'current_page' => 'setCurrentPage',
            'number' => 'setNumber',
            'search_params' => 'setSearchParams',
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    public static function getters(): array
    {
        return [
            'caption' => 'getCaption',
            'current_page' => 'getCurrentPage',
            'number' => 'getNumber',
            'search_params' => 'getSearchParams',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['current_page'] === null) {
            $invalidProperties[] = "'current_page' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * @param string $caption caption
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * @return bool
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * @param bool $current_page current_page
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\Params
     */
    public function getSearchParams()
    {
        return $this->container['search_params'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\Params $search_params search_params
     *
     * @return $this
     */
    public function setSearchParams($search_params)
    {
        $this->container['search_params'] = $search_params;

        return $this;
    }
}

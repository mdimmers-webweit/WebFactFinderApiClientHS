<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\SearchParamsBase;

/**
 * Params Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Params extends SearchParamsBase
{
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Params';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'ab_test' => 'map[string,string]',
        'advisor_status' => '\Web\FactFinderApi\Client\V1\Model\AdvisorCampaignStatusHolder',
        'article_number' => 'bool',
        'channel' => 'string',
        'custom_parameters' => '\Web\FactFinderApi\Client\V1\Model\CustomParameter[]',
        'filters' => '\Web\FactFinderApi\Client\V1\Model\Filter[]',
        'follow_search' => 'int',
        'no_article_number_search' => 'bool',
        'page' => 'int',
        'query' => 'string',
        'results_per_page' => 'int',
        'search_field' => 'string',
        'seo_path' => 'string',
        'sorts_list' => '\Web\FactFinderApi\Client\V1\Model\SortItem[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    protected static $swaggerFormats = [
        'ab_test' => null,
        'advisor_status' => null,
        'article_number' => null,
        'channel' => null,
        'custom_parameters' => null,
        'filters' => null,
        'follow_search' => 'int32',
        'no_article_number_search' => null,
        'page' => 'int32',
        'query' => null,
        'results_per_page' => 'int32',
        'search_field' => null,
        'seo_path' => null,
        'sorts_list' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ab_test' => 'abTest',
        'advisor_status' => 'advisorStatus',
        'article_number' => 'articleNumber',
        'channel' => 'channel',
        'custom_parameters' => 'customParameters',
        'filters' => 'filters',
        'follow_search' => 'followSearch',
        'no_article_number_search' => 'noArticleNumberSearch',
        'page' => 'page',
        'query' => 'query',
        'results_per_page' => 'resultsPerPage',
        'search_field' => 'searchField',
        'seo_path' => 'seoPath',
        'sorts_list' => 'sortsList',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ab_test' => 'setAbTest',
        'advisor_status' => 'setAdvisorStatus',
        'article_number' => 'setArticleNumber',
        'channel' => 'setChannel',
        'custom_parameters' => 'setCustomParameters',
        'filters' => 'setFilters',
        'follow_search' => 'setFollowSearch',
        'no_article_number_search' => 'setNoArticleNumberSearch',
        'page' => 'setPage',
        'query' => 'setQuery',
        'results_per_page' => 'setResultsPerPage',
        'search_field' => 'setSearchField',
        'seo_path' => 'setSeoPath',
        'sorts_list' => 'setSortsList',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ab_test' => 'getAbTest',
        'advisor_status' => 'getAdvisorStatus',
        'article_number' => 'getArticleNumber',
        'channel' => 'getChannel',
        'custom_parameters' => 'getCustomParameters',
        'filters' => 'getFilters',
        'follow_search' => 'getFollowSearch',
        'no_article_number_search' => 'getNoArticleNumberSearch',
        'page' => 'getPage',
        'query' => 'getQuery',
        'results_per_page' => 'getResultsPerPage',
        'search_field' => 'getSearchField',
        'seo_path' => 'getSeoPath',
        'sorts_list' => 'getSortsList',
    ];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        parent::__construct($data);
        $this->container['ab_test'] = $data['ab_test'] ?? null;
        $this->container['article_number'] = $data['article_number'] ?? null;
        $this->container['follow_search'] = $data['follow_search'] ?? null;
        $this->container['no_article_number_search'] = $data['no_article_number_search'] ?? null;
        $this->container['results_per_page'] = $data['results_per_page'] ?? null;
        $this->container['seo_path'] = $data['seo_path'] ?? null;
        $this->container['sorts_list'] = $data['sorts_list'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['custom_parameters'] === null) {
            $invalidProperties[] = "'custom_parameters' can't be null";
        }
        if ($this->container['filters'] === null) {
            $invalidProperties[] = "'filters' can't be null";
        }
        if ($this->container['follow_search'] === null) {
            $invalidProperties[] = "'follow_search' can't be null";
        }
        if ($this->container['no_article_number_search'] === null) {
            $invalidProperties[] = "'no_article_number_search' can't be null";
        }
        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if ($this->container['results_per_page'] === null) {
            $invalidProperties[] = "'results_per_page' can't be null";
        }
        if ($this->container['sorts_list'] === null) {
            $invalidProperties[] = "'sorts_list' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string[]
     */
    public function getAbTest()
    {
        return $this->container['ab_test'];
    }

    /**
     * @param string[] $ab_test ab_test
     *
     * @return $this
     */
    public function setAbTest($ab_test)
    {
        $this->container['ab_test'] = $ab_test;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\AdvisorCampaignStatusHolder
     */
    public function getAdvisorStatus()
    {
        return $this->container['advisor_status'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\AdvisorCampaignStatusHolder $advisor_status advisor_status
     *
     * @return $this
     */
    public function setAdvisorStatus($advisor_status)
    {
        $this->container['advisor_status'] = $advisor_status;

        return $this;
    }

    /**
     * @return bool
     */
    public function getArticleNumber()
    {
        return $this->container['article_number'];
    }

    /**
     * @param bool $article_number article_number
     *
     * @return $this
     */
    public function setArticleNumber($article_number)
    {
        $this->container['article_number'] = $article_number;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\CustomParameter[]
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\CustomParameter[] $custom_parameters custom_parameters
     *
     * @return $this
     */
    public function setCustomParameters($custom_parameters)
    {
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\Filter[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\Filter[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * @return int
     */
    public function getFollowSearch()
    {
        return $this->container['follow_search'];
    }

    /**
     * @param int $follow_search follow_search
     *
     * @return $this
     */
    public function setFollowSearch($follow_search)
    {
        $this->container['follow_search'] = $follow_search;

        return $this;
    }

    /**
     * @return bool
     */
    public function getNoArticleNumberSearch()
    {
        return $this->container['no_article_number_search'];
    }

    /**
     * @param bool $no_article_number_search no_article_number_search
     *
     * @return $this
     */
    public function setNoArticleNumberSearch($no_article_number_search)
    {
        $this->container['no_article_number_search'] = $no_article_number_search;

        return $this;
    }

    /**
     * @param int|null $page page
     *
     * @return $this
     */
    public function setPage(?int $page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * @return int
     */
    public function getResultsPerPage()
    {
        return $this->container['results_per_page'];
    }

    /**
     * @param int $results_per_page results_per_page
     *
     * @return $this
     */
    public function setResultsPerPage($results_per_page)
    {
        $this->container['results_per_page'] = $results_per_page;

        return $this;
    }

    /**
     * @return string
     */
    public function getSeoPath()
    {
        return $this->container['seo_path'];
    }

    /**
     * @param string $seo_path seo_path
     *
     * @return $this
     */
    public function setSeoPath($seo_path)
    {
        $this->container['seo_path'] = $seo_path;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\SortItem[]
     */
    public function getSortsList()
    {
        return $this->container['sorts_list'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\SortItem[] $sorts_list sorts_list
     *
     * @return $this
     */
    public function setSortsList($sorts_list)
    {
        $this->container['sorts_list'] = $sorts_list;

        return $this;
    }
}

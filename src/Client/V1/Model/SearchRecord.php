<?php
declare(strict_types=1);
/*
 * FACT-Finder
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * SearchRecord Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SearchRecord extends BaseModel implements ModelV1Interface
{
    /**
     * Array of property to type mappings. Used for (de)serialization
     */
    public static function swaggerTypes(): array
    {
        return [
            'found_words' => 'string[]',
            'id' => 'string',
            'keywords' => 'string[]',
            'position' => 'int',
            'record' => 'map[string,string]',
            'search_similarity' => 'float',
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     */
    public static function attributeMap(): array
    {
        return [
            'found_words' => 'foundWords',
            'id' => 'id',
            'keywords' => 'keywords',
            'position' => 'position',
            'record' => 'record',
            'search_similarity' => 'searchSimilarity',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['found_words'] === null) {
            $invalidProperties[] = "'found_words' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['record'] === null) {
            $invalidProperties[] = "'record' can't be null";
        }
        if ($this->container['search_similarity'] === null) {
            $invalidProperties[] = "'search_similarity' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string[]
     */
    public function getFoundWords()
    {
        return $this->container['found_words'];
    }

    /**
     * @param string[] $found_words found_words
     *
     * @return $this
     */
    public function setFoundWords($found_words)
    {
        $this->container['found_words'] = $found_words;

        return $this;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * @param string[] $keywords keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * @param string[] $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * @return float
     */
    public function getSearchSimilarity()
    {
        return $this->container['search_similarity'];
    }

    /**
     * @param float $search_similarity search_similarity
     *
     * @return $this
     */
    public function setSearchSimilarity($search_similarity)
    {
        $this->container['search_similarity'] = $search_similarity;

        return $this;
    }
}

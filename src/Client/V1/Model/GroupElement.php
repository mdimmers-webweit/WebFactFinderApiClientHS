<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * GroupElement Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class GroupElement extends BaseModel
{
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'GroupElement';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'absolute_max_value' => 'double',
        'absolute_min_value' => 'double',
        'active' => 'bool',
        'associated_field_name' => 'string',
        'cluster_level' => 'int',
        'preview_image_url' => 'string',
        'record_count' => 'int',
        'search_params' => '\Web\FactFinderApi\Client\V1\Model\Params',
        'selected' => 'bool',
        'selected_max_value' => 'double',
        'selected_min_value' => 'double',
        'text' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'absolute_max_value' => 'double',
        'absolute_min_value' => 'double',
        'active' => null,
        'associated_field_name' => null,
        'cluster_level' => 'int32',
        'preview_image_url' => null,
        'record_count' => 'int32',
        'search_params' => null,
        'selected' => null,
        'selected_max_value' => 'double',
        'selected_min_value' => 'double',
        'text' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'absolute_max_value' => 'absoluteMaxValue',
        'absolute_min_value' => 'absoluteMinValue',
        'active' => 'active',
        'associated_field_name' => 'associatedFieldName',
        'cluster_level' => 'clusterLevel',
        'preview_image_url' => 'previewImageURL',
        'record_count' => 'recordCount',
        'search_params' => 'searchParams',
        'selected' => 'selected',
        'selected_max_value' => 'selectedMaxValue',
        'selected_min_value' => 'selectedMinValue',
        'text' => 'text',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'absolute_max_value' => 'setAbsoluteMaxValue',
        'absolute_min_value' => 'setAbsoluteMinValue',
        'active' => 'setActive',
        'associated_field_name' => 'setAssociatedFieldName',
        'cluster_level' => 'setClusterLevel',
        'preview_image_url' => 'setPreviewImageUrl',
        'record_count' => 'setRecordCount',
        'search_params' => 'setSearchParams',
        'selected' => 'setSelected',
        'selected_max_value' => 'setSelectedMaxValue',
        'selected_min_value' => 'setSelectedMinValue',
        'text' => 'setText',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'absolute_max_value' => 'getAbsoluteMaxValue',
        'absolute_min_value' => 'getAbsoluteMinValue',
        'active' => 'getActive',
        'associated_field_name' => 'getAssociatedFieldName',
        'cluster_level' => 'getClusterLevel',
        'preview_image_url' => 'getPreviewImageUrl',
        'record_count' => 'getRecordCount',
        'search_params' => 'getSearchParams',
        'selected' => 'getSelected',
        'selected_max_value' => 'getSelectedMaxValue',
        'selected_min_value' => 'getSelectedMinValue',
        'text' => 'getText',
    ];

    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['absolute_max_value'] = $data['absolute_max_value'] ?? null;
        $this->container['absolute_min_value'] = $data['absolute_min_value'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['associated_field_name'] = $data['associated_field_name'] ?? null;
        $this->container['cluster_level'] = $data['cluster_level'] ?? null;
        $this->container['preview_image_url'] = $data['preview_image_url'] ?? null;
        $this->container['record_count'] = $data['record_count'] ?? null;
        $this->container['search_params'] = $data['search_params'] ?? null;
        $this->container['selected'] = $data['selected'] ?? null;
        $this->container['selected_max_value'] = $data['selected_max_value'] ?? null;
        $this->container['selected_min_value'] = $data['selected_min_value'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['associated_field_name'] === null) {
            $invalidProperties[] = "'associated_field_name' can't be null";
        }
        if ($this->container['cluster_level'] === null) {
            $invalidProperties[] = "'cluster_level' can't be null";
        }
        if ($this->container['record_count'] === null) {
            $invalidProperties[] = "'record_count' can't be null";
        }
        if ($this->container['selected'] === null) {
            $invalidProperties[] = "'selected' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return float
     */
    public function getAbsoluteMaxValue()
    {
        return $this->container['absolute_max_value'];
    }

    /**
     * @param float $absolute_max_value absolute_max_value
     *
     * @return $this
     */
    public function setAbsoluteMaxValue($absolute_max_value)
    {
        $this->container['absolute_max_value'] = $absolute_max_value;

        return $this;
    }

    /**
     * @return float
     */
    public function getAbsoluteMinValue()
    {
        return $this->container['absolute_min_value'];
    }

    /**
     * @param float $absolute_min_value absolute_min_value
     *
     * @return $this
     */
    public function setAbsoluteMinValue($absolute_min_value)
    {
        $this->container['absolute_min_value'] = $absolute_min_value;

        return $this;
    }

    /**
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * @return string
     */
    public function getAssociatedFieldName()
    {
        return $this->container['associated_field_name'];
    }

    /**
     * @param string $associated_field_name associated_field_name
     *
     * @return $this
     */
    public function setAssociatedFieldName($associated_field_name)
    {
        $this->container['associated_field_name'] = $associated_field_name;

        return $this;
    }

    /**
     * @return int
     */
    public function getClusterLevel()
    {
        return $this->container['cluster_level'];
    }

    /**
     * @param int $cluster_level cluster_level
     *
     * @return $this
     */
    public function setClusterLevel($cluster_level)
    {
        $this->container['cluster_level'] = $cluster_level;

        return $this;
    }

    /**
     * @return string
     */
    public function getPreviewImageUrl()
    {
        return $this->container['preview_image_url'];
    }

    /**
     * @param string $preview_image_url preview_image_url
     *
     * @return $this
     */
    public function setPreviewImageUrl($preview_image_url)
    {
        $this->container['preview_image_url'] = $preview_image_url;

        return $this;
    }

    /**
     * @return int
     */
    public function getRecordCount()
    {
        return $this->container['record_count'];
    }

    /**
     * @param int $record_count record_count
     *
     * @return $this
     */
    public function setRecordCount($record_count)
    {
        $this->container['record_count'] = $record_count;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\Params
     */
    public function getSearchParams()
    {
        return $this->container['search_params'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\Params $search_params search_params
     *
     * @return $this
     */
    public function setSearchParams($search_params)
    {
        $this->container['search_params'] = $search_params;

        return $this;
    }

    /**
     * @return bool
     */
    public function getSelected()
    {
        return $this->container['selected'];
    }

    /**
     * @param bool $selected selected
     *
     * @return $this
     */
    public function setSelected($selected)
    {
        $this->container['selected'] = $selected;

        return $this;
    }

    /**
     * @return float
     */
    public function getSelectedMaxValue()
    {
        return $this->container['selected_max_value'];
    }

    /**
     * @param float $selected_max_value selected_max_value
     *
     * @return $this
     */
    public function setSelectedMaxValue($selected_max_value)
    {
        $this->container['selected_max_value'] = $selected_max_value;

        return $this;
    }

    /**
     * @return float
     */
    public function getSelectedMinValue()
    {
        return $this->container['selected_min_value'];
    }

    /**
     * @param float $selected_min_value selected_min_value
     *
     * @return $this
     */
    public function setSelectedMinValue($selected_min_value)
    {
        $this->container['selected_min_value'] = $selected_min_value;

        return $this;
    }

    /**
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }
}

<?php
declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\ResultBase;

/**
 * Result Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class Result extends ResultBase implements ModelV1Interface
{
    const RESULT_ARTICLE_NUMBER_STATUS_NO_ARTICLE_NUMBER_SEARCH = 'noArticleNumberSearch';
    const RESULT_ARTICLE_NUMBER_STATUS_NOTHING_FOUND = 'nothingFound';
    const RESULT_ARTICLE_NUMBER_STATUS_RESULTS_FOUND = 'resultsFound';
    const RESULT_STATUS_RESULTS_FOUND = 'resultsFound';
    const RESULT_STATUS_NOTHING_FOUND = 'nothingFound';
    const RESULT_STATUS_ERROR_OCCURED = 'errorOccured';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    public static function swaggerTypes(): array
    {
        $result = parent::swaggerTypes();

        $result = \array_merge($result, [
            'applied_preprocessor_entries' => static::getModelClass('PreprocessorEntry', true),
            'result_article_number_status' => 'string',
            'result_status' => 'string',
            'results_per_page_list' => static::getModelClass('ResultsPerPageOptionWithSearchParams', true),
            'score_first_hit' => 'int',
            'score_last_hit' => 'int',
        ]);

        return $result;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    public static function attributeMap(): array
    {
        $result = parent::attributeMap();

        $result = \array_merge($result, [
            'facets' => 'asnGroups',
            'campaigns' => 'campaignsList',
            'applied_preprocessor_entries' => 'appliedPreprocessorEntries',
            'result_article_number_status' => 'resultArticleNumberStatus',
            'result_status' => 'resultStatus',
            'results_per_page_list' => 'resultsPerPageList',
            'score_first_hit' => 'simiFirstRecord',
            'score_last_hit' => 'simiLastRecord',
            'took_total' => 'searchTime',
            'total_hits' => 'resultCount',
            'sort_items' => 'sortsList',
            'hits' => 'records',
        ]);

        return $result;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultArticleNumberStatusAllowableValues()
    {
        return [
            self::RESULT_ARTICLE_NUMBER_STATUS_NO_ARTICLE_NUMBER_SEARCH,
            self::RESULT_ARTICLE_NUMBER_STATUS_NOTHING_FOUND,
            self::RESULT_ARTICLE_NUMBER_STATUS_RESULTS_FOUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultStatusAllowableValues()
    {
        return [
            self::RESULT_STATUS_RESULTS_FOUND,
            self::RESULT_STATUS_NOTHING_FOUND,
            self::RESULT_STATUS_ERROR_OCCURED,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['result_article_number_status'] === null) {
            $invalidProperties[] = "'result_article_number_status' can't be null";
        }
        $allowedValues = $this->getResultArticleNumberStatusAllowableValues();
        if (!\is_null($this->container['result_article_number_status']) && !\in_array($this->container['result_article_number_status'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'result_article_number_status', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        if ($this->container['result_status'] === null) {
            $invalidProperties[] = "'result_status' can't be null";
        }
        $allowedValues = $this->getResultStatusAllowableValues();
        if (!\is_null($this->container['result_status']) && !\in_array($this->container['result_status'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value for 'result_status', must be one of '%s'",
                \implode("', '", $allowedValues)
            );
        }

        if ($this->container['results_per_page_list'] === null) {
            $invalidProperties[] = "'results_per_page_list' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\PreprocessorEntry[]
     */
    public function getAppliedPreprocessorEntries()
    {
        return $this->container['applied_preprocessor_entries'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\PreprocessorEntry[] $applied_preprocessor_entries applied_preprocessor_entries
     *
     * @return $this
     */
    public function setAppliedPreprocessorEntries($applied_preprocessor_entries)
    {
        $this->container['applied_preprocessor_entries'] = $applied_preprocessor_entries;

        return $this;
    }

    /**
     * @return string
     */
    public function getResultArticleNumberStatus()
    {
        return $this->container['result_article_number_status'];
    }

    /**
     * @param string $result_article_number_status result_article_number_status
     *
     * @return $this
     */
    public function setResultArticleNumberStatus($result_article_number_status)
    {
        $allowedValues = $this->getResultArticleNumberStatusAllowableValues();
        if (!\in_array($result_article_number_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'result_article_number_status', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_article_number_status'] = $result_article_number_status;

        return $this;
    }

    /**
     * @return string
     */
    public function getResultStatus()
    {
        return $this->container['result_status'];
    }

    /**
     * @param string $result_status result_status
     *
     * @return $this
     */
    public function setResultStatus($result_status)
    {
        $allowedValues = $this->getResultStatusAllowableValues();
        if (!\in_array($result_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value for 'result_status', must be one of '%s'",
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_status'] = $result_status;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\ResultsPerPageOptionWithSearchParams[]
     */
    public function getResultsPerPageList()
    {
        return $this->container['results_per_page_list'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\ResultsPerPageOptionWithSearchParams[] $results_per_page_list results_per_page_list
     *
     * @return $this
     */
    public function setResultsPerPageList($results_per_page_list)
    {
        $this->container['results_per_page_list'] = $results_per_page_list;

        return $this;
    }
}

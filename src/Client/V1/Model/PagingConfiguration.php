<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * PagingConfiguration Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class PagingConfiguration extends BaseModel
{
    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['default_results_per_page'] = $data['default_results_per_page'] ?? null;
        $this->container['link_count'] = $data['link_count'] ?? null;
        $this->container['next_caption'] = $data['next_caption'] ?? null;
        $this->container['previous_caption'] = $data['previous_caption'] ?? null;
        $this->container['results_per_page'] = $data['results_per_page'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    public static function swaggerTypes(): array
    {
        return [
            'default_results_per_page' => 'int',
            'link_count' => 'int',
            'next_caption' => 'string',
            'previous_caption' => 'string',
            'results_per_page' => '\Web\FactFinderApi\Client\V1\Model\ResultsPerPageOption[]',
        ];
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function swaggerFormats(): array
    {
        return [
            'default_results_per_page' => 'int32',
            'link_count' => 'int32',
            'next_caption' => null,
            'previous_caption' => null,
            'results_per_page' => null,
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    public static function attributeMap(): array
    {
        return [
            'default_results_per_page' => 'defaultResultsPerPage',
            'link_count' => 'linkCount',
            'next_caption' => 'nextCaption',
            'previous_caption' => 'previousCaption',
            'results_per_page' => 'resultsPerPage',
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    public static function setters(): array
    {
        return [
            'default_results_per_page' => 'setDefaultResultsPerPage',
            'link_count' => 'setLinkCount',
            'next_caption' => 'setNextCaption',
            'previous_caption' => 'setPreviousCaption',
            'results_per_page' => 'setResultsPerPage',
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    public static function getters(): array
    {
        return [
            'default_results_per_page' => 'getDefaultResultsPerPage',
            'link_count' => 'getLinkCount',
            'next_caption' => 'getNextCaption',
            'previous_caption' => 'getPreviousCaption',
            'results_per_page' => 'getResultsPerPage',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['link_count'] === null) {
            $invalidProperties[] = "'link_count' can't be null";
        }
        if ($this->container['next_caption'] === null) {
            $invalidProperties[] = "'next_caption' can't be null";
        }
        if ($this->container['previous_caption'] === null) {
            $invalidProperties[] = "'previous_caption' can't be null";
        }
        if ($this->container['results_per_page'] === null) {
            $invalidProperties[] = "'results_per_page' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return int
     */
    public function getDefaultResultsPerPage()
    {
        return $this->container['default_results_per_page'];
    }

    /**
     * @param int $default_results_per_page default_results_per_page
     *
     * @return $this
     */
    public function setDefaultResultsPerPage($default_results_per_page)
    {
        $this->container['default_results_per_page'] = $default_results_per_page;

        return $this;
    }

    /**
     * @return int
     */
    public function getLinkCount()
    {
        return $this->container['link_count'];
    }

    /**
     * @param int $link_count link_count
     *
     * @return $this
     */
    public function setLinkCount($link_count)
    {
        $this->container['link_count'] = $link_count;

        return $this;
    }

    /**
     * @return string
     */
    public function getNextCaption()
    {
        return $this->container['next_caption'];
    }

    /**
     * @param string $next_caption next_caption
     *
     * @return $this
     */
    public function setNextCaption($next_caption)
    {
        $this->container['next_caption'] = $next_caption;

        return $this;
    }

    /**
     * @return string
     */
    public function getPreviousCaption()
    {
        return $this->container['previous_caption'];
    }

    /**
     * @param string $previous_caption previous_caption
     *
     * @return $this
     */
    public function setPreviousCaption($previous_caption)
    {
        $this->container['previous_caption'] = $previous_caption;

        return $this;
    }

    /**
     * @return \Web\FactFinderApi\Client\V1\Model\ResultsPerPageOption[]
     */
    public function getResultsPerPage()
    {
        return $this->container['results_per_page'];
    }

    /**
     * @param \Web\FactFinderApi\Client\V1\Model\ResultsPerPageOption[] $results_per_page results_per_page
     *
     * @return $this
     */
    public function setResultsPerPage($results_per_page)
    {
        $this->container['results_per_page'] = $results_per_page;

        return $this;
    }
}

<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Model;

use Web\FactFinderApi\Client\Model\BaseModel;

/**
 * ClickEvent Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ClickEvent extends BaseModel
{
    /**
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['campaign'] = $data['campaign'] ?? null;
        $this->container['cookie_id'] = $data['cookie_id'] ?? null;
        $this->container['extra_params'] = $data['extra_params'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['master_id'] = $data['master_id'] ?? null;
        $this->container['orig_page_size'] = $data['orig_page_size'] ?? null;
        $this->container['orig_pos'] = $data['orig_pos'] ?? null;
        $this->container['page'] = $data['page'] ?? null;
        $this->container['page_size'] = $data['page_size'] ?? null;
        $this->container['pos'] = $data['pos'] ?? null;
        $this->container['query'] = $data['query'] ?? null;
        $this->container['sid'] = $data['sid'] ?? null;
        $this->container['simi'] = $data['simi'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    public static function swaggerTypes(): array
    {
        return [
            'campaign' => 'string',
            'cookie_id' => 'string',
            'extra_params' => 'map[string,string]',
            'id' => 'string',
            'master_id' => 'string',
            'orig_page_size' => 'int',
            'orig_pos' => 'int',
            'page' => 'int',
            'page_size' => 'int',
            'pos' => 'int',
            'query' => 'string',
            'sid' => 'string',
            'simi' => 'double',
            'title' => 'string',
            'user_id' => 'string',
        ];
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function swaggerFormats(): array
    {
        return [
            'campaign' => null,
            'cookie_id' => null,
            'extra_params' => null,
            'id' => null,
            'master_id' => null,
            'orig_page_size' => 'int32',
            'orig_pos' => 'int32',
            'page' => 'int32',
            'page_size' => 'int32',
            'pos' => 'int32',
            'query' => null,
            'sid' => null,
            'simi' => 'double',
            'title' => null,
            'user_id' => null,
        ];
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    public static function attributeMap(): array
    {
        return [
            'campaign' => 'campaign',
            'cookie_id' => 'cookieId',
            'extra_params' => 'extraParams',
            'id' => 'id',
            'master_id' => 'masterId',
            'orig_page_size' => 'origPageSize',
            'orig_pos' => 'origPos',
            'page' => 'page',
            'page_size' => 'pageSize',
            'pos' => 'pos',
            'query' => 'query',
            'sid' => 'sid',
            'simi' => 'simi',
            'title' => 'title',
            'user_id' => 'userId',
        ];
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    public static function setters(): array
    {
        return [
            'campaign' => 'setCampaign',
            'cookie_id' => 'setCookieId',
            'extra_params' => 'setExtraParams',
            'id' => 'setId',
            'master_id' => 'setMasterId',
            'orig_page_size' => 'setOrigPageSize',
            'orig_pos' => 'setOrigPos',
            'page' => 'setPage',
            'page_size' => 'setPageSize',
            'pos' => 'setPos',
            'query' => 'setQuery',
            'sid' => 'setSid',
            'simi' => 'setSimi',
            'title' => 'setTitle',
            'user_id' => 'setUserId',
        ];
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    public static function getters(): array
    {
        return [
            'campaign' => 'getCampaign',
            'cookie_id' => 'getCookieId',
            'extra_params' => 'getExtraParams',
            'id' => 'getId',
            'master_id' => 'getMasterId',
            'orig_page_size' => 'getOrigPageSize',
            'orig_pos' => 'getOrigPos',
            'page' => 'getPage',
            'page_size' => 'getPageSize',
            'pos' => 'getPos',
            'query' => 'getQuery',
            'sid' => 'getSid',
            'simi' => 'getSimi',
            'title' => 'getTitle',
            'user_id' => 'getUserId',
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['campaign'] === null) {
            $invalidProperties[] = "'campaign' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['orig_page_size'] === null) {
            $invalidProperties[] = "'orig_page_size' can't be null";
        }
        if ($this->container['orig_pos'] === null) {
            $invalidProperties[] = "'orig_pos' can't be null";
        }
        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if ($this->container['pos'] === null) {
            $invalidProperties[] = "'pos' can't be null";
        }
        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        if ($this->container['sid'] === null) {
            $invalidProperties[] = "'sid' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * @return string
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * @param string $campaign campaign
     *
     * @return $this
     */
    public function setCampaign($campaign)
    {
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * @return string
     */
    public function getCookieId()
    {
        return $this->container['cookie_id'];
    }

    /**
     * @param string $cookie_id cookie_id
     *
     * @return $this
     */
    public function setCookieId($cookie_id)
    {
        $this->container['cookie_id'] = $cookie_id;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getExtraParams()
    {
        return $this->container['extra_params'];
    }

    /**
     * @param string[] $extra_params extra_params
     *
     * @return $this
     */
    public function setExtraParams($extra_params)
    {
        $this->container['extra_params'] = $extra_params;

        return $this;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * @return string
     */
    public function getMasterId()
    {
        return $this->container['master_id'];
    }

    /**
     * @param string $master_id master_id
     *
     * @return $this
     */
    public function setMasterId($master_id)
    {
        $this->container['master_id'] = $master_id;

        return $this;
    }

    /**
     * @return int
     */
    public function getOrigPageSize()
    {
        return $this->container['orig_page_size'];
    }

    /**
     * @param int $orig_page_size orig_page_size
     *
     * @return $this
     */
    public function setOrigPageSize($orig_page_size)
    {
        $this->container['orig_page_size'] = $orig_page_size;

        return $this;
    }

    /**
     * @return int
     */
    public function getOrigPos()
    {
        return $this->container['orig_pos'];
    }

    /**
     * @param int $orig_pos orig_pos
     *
     * @return $this
     */
    public function setOrigPos($orig_pos)
    {
        $this->container['orig_pos'] = $orig_pos;

        return $this;
    }

    /**
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * @param int $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * @return int
     */
    public function getPos()
    {
        return $this->container['pos'];
    }

    /**
     * @param int $pos pos
     *
     * @return $this
     */
    public function setPos($pos)
    {
        $this->container['pos'] = $pos;

        return $this;
    }

    /**
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * @param string $query query
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * @return string
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * @param string $sid sid
     *
     * @return $this
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * @return float
     */
    public function getSimi()
    {
        return $this->container['simi'];
    }

    /**
     * @param float $simi simi
     *
     * @return $this
     */
    public function setSimi($simi)
    {
        $this->container['simi'] = $simi;

        return $this;
    }

    /**
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
}

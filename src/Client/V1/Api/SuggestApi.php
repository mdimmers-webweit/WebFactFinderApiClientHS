<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Psr7\Request;
use Web\FactFinderApi\Client\ObjectSerializer;
use Web\FactFinderApi\Client\V1\Model\SearchParams;

/**
 * SuggestApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SuggestApi extends ApiClient
{
    /**
     * Operation getSuggestionsUsingGET
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]
     */
    public function getSuggestionsUsingGET(string $channel, $query)
    {
        list($response) = $this->getSuggestionsUsingGETWithHttpInfo($channel, $query);

        return $response;
    }

    /**
     * Operation getSuggestionsUsingGETWithHttpInfo
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsUsingGETWithHttpInfo(string $channel, $query)
    {
        $request = $this->getSuggestionsUsingGETRequest($channel, $query);

        return $this->executeRequest($request, '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]');
    }

    /**
     * Operation getSuggestionsUsingGETAsync
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingGETAsync(string $channel, $query)
    {
        return $this->getSuggestionsUsingGETAsyncWithHttpInfo($channel, $query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsUsingGETAsyncWithHttpInfo
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingGETAsyncWithHttpInfo(string $channel, $query)
    {
        $request = $this->getSuggestionsUsingGETRequest($channel, $query);

        return $this->executeAsyncRequest($request, '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]');
    }

    /**
     * Operation getSuggestionsUsingPOST
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchParams $params params (required)
     *
     *@throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]
     */
    public function getSuggestionsUsingPOST(SearchParams $params)
    {
        list($response) = $this->getSuggestionsUsingPOSTWithHttpInfo($params);

        return $response;
    }

    /**
     * Operation getSuggestionsUsingPOSTWithHttpInfo
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchParams $params params (required)
     *
     *@throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsUsingPOSTWithHttpInfo(SearchParams $params)
    {
        $request = $this->getSuggestionsUsingPOSTRequest($params);

        return $this->executeRequest($request, '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]');
    }

    /**
     * Operation getSuggestionsUsingPOSTAsync
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchParams $params params (required)
     *
     *@throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingPOSTAsync(SearchParams $params)
    {
        return $this->getSuggestionsUsingPOSTAsyncWithHttpInfo($params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsUsingPOSTAsyncWithHttpInfo
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchParams $params params (required)
     *
     *@throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingPOSTAsyncWithHttpInfo(SearchParams $params)
    {
        $request = $this->getSuggestionsUsingPOSTRequest($params);

        return $this->executeAsyncRequest($request, '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]');
    }

    /**
     * Create request for operation 'getSuggestionsUsingGET'
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getSuggestionsUsingGETRequest(string $channel, $query)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getSuggestionsUsingGET'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (\is_array($query) && \count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getSuggestionsUsingGET'
            );
        }

        $resourcePath = '/v1/suggest/{channel}';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->getQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'getSuggestionsUsingPOST'
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchParams $params params (required)
     *
     *@throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getSuggestionsUsingPOSTRequest(SearchParams $params)
    {
        $resourcePath = '/v1/suggest';

        return $this->postQuery($resourcePath, [], $params);
    }
}

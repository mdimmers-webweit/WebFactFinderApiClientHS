<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\ClientInterface;
use GuzzleHttp6\Exception\RequestException;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\Configuration;
use Web\FactFinderApi\Client\HeaderSelector;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * SuggestApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SuggestApi extends ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getSuggestionsUsingGET
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]
     */
    public function getSuggestionsUsingGET($channel, $query)
    {
        list($response) = $this->getSuggestionsUsingGETWithHttpInfo($channel, $query);

        return $response;
    }

    /**
     * Operation getSuggestionsUsingGETWithHttpInfo
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsUsingGETWithHttpInfo($channel, $query)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]';
        $request = $this->getSuggestionsUsingGETRequest($channel, $query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuggestionsUsingGETAsync
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingGETAsync($channel, $query)
    {
        return $this->getSuggestionsUsingGETAsyncWithHttpInfo($channel, $query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsUsingGETAsyncWithHttpInfo
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingGETAsyncWithHttpInfo($channel, $query)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]';
        $request = $this->getSuggestionsUsingGETRequest($channel, $query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getSuggestionsUsingPOST
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\Params $params params (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]
     */
    public function getSuggestionsUsingPOST($params)
    {
        list($response) = $this->getSuggestionsUsingPOSTWithHttpInfo($params);

        return $response;
    }

    /**
     * Operation getSuggestionsUsingPOSTWithHttpInfo
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\Params $params params (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ResultSuggestion[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSuggestionsUsingPOSTWithHttpInfo($params)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]';
        $request = $this->getSuggestionsUsingPOSTRequest($params);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSuggestionsUsingPOSTAsync
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\Params $params params (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingPOSTAsync($params)
    {
        return $this->getSuggestionsUsingPOSTAsyncWithHttpInfo($params)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSuggestionsUsingPOSTAsyncWithHttpInfo
     *
     * Get suggestions with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\Params $params params (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getSuggestionsUsingPOSTAsyncWithHttpInfo($params)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ResultSuggestion[]';
        $request = $this->getSuggestionsUsingPOSTRequest($params);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSuggestionsUsingGET'
     *
     * @param string $channel channel (required)
     * @param string $query   The search term (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getSuggestionsUsingGETRequest($channel, $query)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getSuggestionsUsingGET'
            );
        }
        // verify the required parameter 'query' is set
        if ($query === null || (\is_array($query) && \count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getSuggestionsUsingGET'
            );
        }

        $resourcePath = '/v1/suggest/{channel}';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = \str_replace(
                '{channel}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getSuggestionsUsingPOST'
     *
     * @param \Web\FactFinderApi\Client\V1\Model\Params $params params (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getSuggestionsUsingPOSTRequest($params)
    {
        // verify the required parameter 'params' is set
        if ($params === null || (\is_array($params) && \count($params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $params when calling getSuggestionsUsingPOST'
            );
        }

        $resourcePath = '/v1/suggest';
        $queryParams = [];
        $httpBody = '';
        // body params
        $_tempBody = null;
        if (isset($params)) {
            $_tempBody = $params;
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

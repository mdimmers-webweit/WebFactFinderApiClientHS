<?php
declare(strict_types=1);
/*
 * FACT-Finder
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Psr7\Request;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * TagcloudApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class TagcloudApi extends ApiClient
{
    /**
     * Operation getTagCloudUsingGET
     *
     * Get tag cloud entries
     *
     * @param string $channel    channel (required)
     * @param int    $word_count The amount of tag cloud entries which should returned. (optional, default to 0)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\TagCloudEntry[]
     */
    public function getTagCloudUsingGET(string $channel, int $word_count = 0)
    {
        [$response] = $this->getTagCloudUsingGETWithHttpInfo($channel, $word_count);

        return $response;
    }

    /**
     * Operation getTagCloudUsingGETWithHttpInfo
     *
     * Get tag cloud entries
     *
     * @param string $channel    channel (required)
     * @param int    $word_count The amount of tag cloud entries which should returned. (optional, default to 0)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\TagCloudEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagCloudUsingGETWithHttpInfo(string $channel, int $word_count = 0)
    {
        $request = $this->getTagCloudUsingGETRequest($channel, $word_count);

        return $this->executeRequest($request, '\Web\FactFinderApi\Client\V1\Model\TagCloudEntry[]');
    }

    /**
     * Operation getTagCloudUsingGETAsync
     *
     * Get tag cloud entries
     *
     * @param string $channel    channel (required)
     * @param int    $word_count The amount of tag cloud entries which should returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getTagCloudUsingGETAsync(string $channel, int $word_count = 0)
    {
        return $this->getTagCloudUsingGETAsyncWithHttpInfo($channel, $word_count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagCloudUsingGETAsyncWithHttpInfo
     *
     * Get tag cloud entries
     *
     * @param string $channel    channel (required)
     * @param int    $word_count The amount of tag cloud entries which should returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getTagCloudUsingGETAsyncWithHttpInfo(string $channel, int $word_count = 0)
    {
        $request = $this->getTagCloudUsingGETRequest($channel, $word_count);

        return $this->executeAsyncRequest($request, '\Web\FactFinderApi\Client\V1\Model\TagCloudEntry[]');
    }

    /**
     * Create request for operation 'getTagCloudUsingGET'
     *
     * @param string $channel    channel (required)
     * @param int    $word_count The amount of tag cloud entries which should returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getTagCloudUsingGETRequest(string $channel, int $word_count = 0)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getTagCloudUsingGET'
            );
        }

        $resourcePath = '/v1/tagcloud/{channel}';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($word_count !== null) {
            $queryParams['wordCount'] = ObjectSerializer::toQueryValue($word_count);
        }

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->getQuery($resourcePath, $queryParams);
    }
}

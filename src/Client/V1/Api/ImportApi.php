<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\ClientInterface;
use GuzzleHttp6\Exception\RequestException;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\Configuration;
use Web\FactFinderApi\Client\HeaderSelector;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * ImportApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ImportApi extends ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation isImportRunningUsingGET
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param string[] $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\WrapperBoolean_
     */
    public function isImportRunningUsingGET($channel)
    {
        list($response) = $this->isImportRunningUsingGETWithHttpInfo($channel);

        return $response;
    }

    /**
     * Operation isImportRunningUsingGETWithHttpInfo
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param string[] $channel channel (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\WrapperBoolean_, HTTP status code, HTTP response headers (array of strings)
     */
    public function isImportRunningUsingGETWithHttpInfo($channel)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\WrapperBoolean_';
        $request = $this->isImportRunningUsingGETRequest($channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation isImportRunningUsingGETAsync
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function isImportRunningUsingGETAsync($channel)
    {
        return $this->isImportRunningUsingGETAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation isImportRunningUsingGETAsyncWithHttpInfo
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function isImportRunningUsingGETAsyncWithHttpInfo($channel)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\WrapperBoolean_';
        $request = $this->isImportRunningUsingGETRequest($channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation startRecommendationImportUsingPOST
     *
     * Start recommendation import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ImportResult
     */
    public function startRecommendationImportUsingPOST($channel = null, $quiet = 'false')
    {
        list($response) = $this->startRecommendationImportUsingPOSTWithHttpInfo($channel, $quiet);

        return $response;
    }

    /**
     * Operation startRecommendationImportUsingPOSTWithHttpInfo
     *
     * Start recommendation import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ImportResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function startRecommendationImportUsingPOSTWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startRecommendationImportUsingPOSTRequest($channel, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startRecommendationImportUsingPOSTAsync
     *
     * Start recommendation import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startRecommendationImportUsingPOSTAsync($channel = null, $quiet = 'false')
    {
        return $this->startRecommendationImportUsingPOSTAsyncWithHttpInfo($channel, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startRecommendationImportUsingPOSTAsyncWithHttpInfo
     *
     * Start recommendation import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startRecommendationImportUsingPOSTAsyncWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startRecommendationImportUsingPOSTRequest($channel, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation startSearchImportUsingPOST
     *
     * Start search import
     *
     * @param string[] $channel  channel (optional)
     * @param bool     $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param bool     $quiet    if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ImportResult
     */
    public function startSearchImportUsingPOST($channel = null, $download = 'false', $quiet = 'false')
    {
        list($response) = $this->startSearchImportUsingPOSTWithHttpInfo($channel, $download, $quiet);

        return $response;
    }

    /**
     * Operation startSearchImportUsingPOSTWithHttpInfo
     *
     * Start search import
     *
     * @param string[] $channel  channel (optional)
     * @param bool     $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param bool     $quiet    if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ImportResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function startSearchImportUsingPOSTWithHttpInfo($channel = null, $download = 'false', $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startSearchImportUsingPOSTRequest($channel, $download, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startSearchImportUsingPOSTAsync
     *
     * Start search import
     *
     * @param string[] $channel  channel (optional)
     * @param bool     $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param bool     $quiet    if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startSearchImportUsingPOSTAsync($channel = null, $download = 'false', $quiet = 'false')
    {
        return $this->startSearchImportUsingPOSTAsyncWithHttpInfo($channel, $download, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startSearchImportUsingPOSTAsyncWithHttpInfo
     *
     * Start search import
     *
     * @param string[] $channel  channel (optional)
     * @param bool     $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param bool     $quiet    if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startSearchImportUsingPOSTAsyncWithHttpInfo($channel = null, $download = 'false', $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startSearchImportUsingPOSTRequest($channel, $download, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation startSuggestImportUsingPOST
     *
     * Start suggest import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\ImportResult
     */
    public function startSuggestImportUsingPOST($channel = null, $quiet = 'false')
    {
        list($response) = $this->startSuggestImportUsingPOSTWithHttpInfo($channel, $quiet);

        return $response;
    }

    /**
     * Operation startSuggestImportUsingPOSTWithHttpInfo
     *
     * Start suggest import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\ImportResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function startSuggestImportUsingPOSTWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startSuggestImportUsingPOSTRequest($channel, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startSuggestImportUsingPOSTAsync
     *
     * Start suggest import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startSuggestImportUsingPOSTAsync($channel = null, $quiet = 'false')
    {
        return $this->startSuggestImportUsingPOSTAsyncWithHttpInfo($channel, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startSuggestImportUsingPOSTAsyncWithHttpInfo
     *
     * Start suggest import
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function startSuggestImportUsingPOSTAsyncWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\ImportResult';
        $request = $this->startSuggestImportUsingPOSTRequest($channel, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'isImportRunningUsingGET'
     *
     * @param string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function isImportRunningUsingGETRequest($channel)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling isImportRunningUsingGET'
            );
        }

        $resourcePath = '/v1/import/running';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'startRecommendationImportUsingPOST'
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function startRecommendationImportUsingPOSTRequest($channel = null, $quiet = 'false')
    {
        $resourcePath = '/v1/import/recommendation';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'startSearchImportUsingPOST'
     *
     * @param string[] $channel  channel (optional)
     * @param bool     $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param bool     $quiet    if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function startSearchImportUsingPOSTRequest($channel = null, $download = 'false', $quiet = 'false')
    {
        $resourcePath = '/v1/import/search';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }
        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'startSuggestImportUsingPOST'
     *
     * @param string[] $channel channel (optional)
     * @param bool     $quiet   if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function startSuggestImportUsingPOSTRequest($channel = null, $quiet = 'false')
    {
        $resourcePath = '/v1/import/suggest';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet);
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi extends ApiClient
{
    /**
     * Operation searchUsingGET
     *
     * Search
     *
     * @param string $channel                  channel (required)
     * @param string $sid                      The session id (optional)
     * @param string $user_input               Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param int    $page                     If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param int    $products_per_page        In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param bool   $no_article_number_search Normally an article number search is carried out if the search term matches one or more set formats. You can also use parameters to prevent an article number search from being carried out. (optional)
     * @param string $search_field             Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param int    $follow_search            The parameter followSearch is automatically attached to all follow-up parameter sets of a search result. The parameter must not be passed on initial requests. For internal reasons it must be passed for all follow-up requests (sorting, filtering, etc.). (optional)
     * @param string $seo_path                 See SEO-Enhancer documentation. (optional)
     * @param string $query                    The search term (optional)
     * @param bool   $use_asn                  Whether or not the ASN (after-search navigation) block should be created. (optional, default to true)
     * @param bool   $use_found_words          FACT-Finder is able to return the words that were used to find the data record for the located records. Determining these words takes up CPU time. true &#x3D; generate the search words or false do not generate the search words. (optional, default to false)
     * @param bool   $use_campaigns            true &#x3D; campaigns are evaluated and returned as appropriate, false &#x3D; campaigns are ignored. (optional, default to true)
     * @param bool   $ids_only                 Whether or not to return only record Ids. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param bool   $use_keywords             FACT-Finder is able to generate product keywords that can be used for SEO. true &#x3D; SEO keywords are evaluated and added to the product records, false &#x3D; SEO keywords are not returned. (optional, default to false)
     * @param bool   $generate_advisor_tree    This parameter is ignored by FACT-Finder. It is still present for compatibility. The advisor tree is always generated. (optional, default to true)
     * @param bool   $disable_cache            Whether or not to use the search result cache. true &#x3D; cache is ignored, false &#x3D; cache is used. (optional, default to false)
     * @param bool   $use_personalization      Whether or not personalize the queries. (optional, default to true)
     * @param bool   $use_semantic_enhancer    Whether or not use the semantic enhancer. (optional, default to true)
     * @param bool   $use_aso                  Whether or not use automatic search optimization. (optional, default to true)
     * @param string $filter_facet_id          When a filter parameter is sent to FACT-Finder, the Search engine only returns results that correspond to the filter indicated. The filter value will not register a hit if only a partial match is detected.It is also possible to combine field filters using AND or OR.Moreover you can send a filter that excludes the given criteria. For example, return all products that are NOT red. As with the sort criteria, the name of the parameter is composed of a prefix and a fieldname. Here, however, the prefix is filter.The filter value is provided as the value of the parameter. If you want to apply multiple filters, you need to insert a separator string between each of the filter values. To combine the filters using a logical AND operator the separator is normally 3 underscores (\\_\\_\\_). If you want to use a logical OR operator, the separator is 3 tildes (\\~\\~\\~). Example: Red\\~\\~\\~Blue These separator strings can be configured in config.xml. If you want the filter to exclude specific values, you need to add a prefix before the filter value. By default this is an exclamation mark (!). Example: !Red This string is also configured in config.xml (optional)
     * @param bool   $navigation               FACT-Finder can also replicate your entire shop navigation. No search term is necessary if you want to use this function. You simply pass the corresponding request. (optional, default to false)
     * @param string $sort_fieldname           By default the result that is returned has been sorted for relevance However, you can specify a different sort order here. It is also possible to sort by more than one criterion. Each sort criterion is applied sequentially. The parameter is made up of the prefix sort and the name of the field by which the data should sorted (sortFIELDNAME). The sort direction is indicated by the value asc for ascending order and desc for descending order.If you want to sort by similarity as well in the event that multiple sortings are specified the parameter is sortRelevancy&#x3D;desc. (optional)
     * @param bool   $query_from_suggest       This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param string $advisor_status           For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\Result
     */
    public function searchUsingGET($channel, $sid = null, $user_input = null, $page = null, $products_per_page = null, $no_article_number_search = null, $search_field = null, $follow_search = null, $seo_path = null, $query = null, $use_asn = 'true', $use_found_words = 'false', $use_campaigns = 'true', $ids_only = 'false', $use_keywords = 'false', $generate_advisor_tree = 'true', $disable_cache = 'false', $use_personalization = 'true', $use_semantic_enhancer = 'true', $use_aso = 'true', $filter_facet_id = null, $navigation = 'false', $sort_fieldname = null, $query_from_suggest = null, $advisor_status = null)
    {
        list($response) = $this->searchUsingGETWithHttpInfo($channel, $sid, $user_input, $page, $products_per_page, $no_article_number_search, $search_field, $follow_search, $seo_path, $query, $use_asn, $use_found_words, $use_campaigns, $ids_only, $use_keywords, $generate_advisor_tree, $disable_cache, $use_personalization, $use_semantic_enhancer, $use_aso, $filter_facet_id, $navigation, $sort_fieldname, $query_from_suggest, $advisor_status);

        return $response;
    }

    /**
     * Operation searchUsingGETWithHttpInfo
     *
     * Search
     *
     * @param string $channel                  channel (required)
     * @param string $sid                      The session id (optional)
     * @param string $user_input               Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param int    $page                     If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param int    $products_per_page        In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param bool   $no_article_number_search Normally an article number search is carried out if the search term matches one or more set formats. You can also use parameters to prevent an article number search from being carried out. (optional)
     * @param string $search_field             Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param int    $follow_search            The parameter followSearch is automatically attached to all follow-up parameter sets of a search result. The parameter must not be passed on initial requests. For internal reasons it must be passed for all follow-up requests (sorting, filtering, etc.). (optional)
     * @param string $seo_path                 See SEO-Enhancer documentation. (optional)
     * @param string $query                    The search term (optional)
     * @param bool   $use_asn                  Whether or not the ASN (after-search navigation) block should be created. (optional, default to true)
     * @param bool   $use_found_words          FACT-Finder is able to return the words that were used to find the data record for the located records. Determining these words takes up CPU time. true &#x3D; generate the search words or false do not generate the search words. (optional, default to false)
     * @param bool   $use_campaigns            true &#x3D; campaigns are evaluated and returned as appropriate, false &#x3D; campaigns are ignored. (optional, default to true)
     * @param bool   $ids_only                 Whether or not to return only record Ids. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param bool   $use_keywords             FACT-Finder is able to generate product keywords that can be used for SEO. true &#x3D; SEO keywords are evaluated and added to the product records, false &#x3D; SEO keywords are not returned. (optional, default to false)
     * @param bool   $generate_advisor_tree    This parameter is ignored by FACT-Finder. It is still present for compatibility. The advisor tree is always generated. (optional, default to true)
     * @param bool   $disable_cache            Whether or not to use the search result cache. true &#x3D; cache is ignored, false &#x3D; cache is used. (optional, default to false)
     * @param bool   $use_personalization      Whether or not personalize the queries. (optional, default to true)
     * @param bool   $use_semantic_enhancer    Whether or not use the semantic enhancer. (optional, default to true)
     * @param bool   $use_aso                  Whether or not use automatic search optimization. (optional, default to true)
     * @param string $filter_facet_id          When a filter parameter is sent to FACT-Finder, the Search engine only returns results that correspond to the filter indicated. The filter value will not register a hit if only a partial match is detected.It is also possible to combine field filters using AND or OR.Moreover you can send a filter that excludes the given criteria. For example, return all products that are NOT red. As with the sort criteria, the name of the parameter is composed of a prefix and a fieldname. Here, however, the prefix is filter.The filter value is provided as the value of the parameter. If you want to apply multiple filters, you need to insert a separator string between each of the filter values. To combine the filters using a logical AND operator the separator is normally 3 underscores (\\_\\_\\_). If you want to use a logical OR operator, the separator is 3 tildes (\\~\\~\\~). Example: Red\\~\\~\\~Blue These separator strings can be configured in config.xml. If you want the filter to exclude specific values, you need to add a prefix before the filter value. By default this is an exclamation mark (!). Example: !Red This string is also configured in config.xml (optional)
     * @param bool   $navigation               FACT-Finder can also replicate your entire shop navigation. No search term is necessary if you want to use this function. You simply pass the corresponding request. (optional, default to false)
     * @param string $sort_fieldname           By default the result that is returned has been sorted for relevance However, you can specify a different sort order here. It is also possible to sort by more than one criterion. Each sort criterion is applied sequentially. The parameter is made up of the prefix sort and the name of the field by which the data should sorted (sortFIELDNAME). The sort direction is indicated by the value asc for ascending order and desc for descending order.If you want to sort by similarity as well in the event that multiple sortings are specified the parameter is sortRelevancy&#x3D;desc. (optional)
     * @param bool   $query_from_suggest       This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param string $advisor_status           For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingGETWithHttpInfo($channel, $sid = null, $user_input = null, $page = null, $products_per_page = null, $no_article_number_search = null, $search_field = null, $follow_search = null, $seo_path = null, $query = null, $use_asn = 'true', $use_found_words = 'false', $use_campaigns = 'true', $ids_only = 'false', $use_keywords = 'false', $generate_advisor_tree = 'true', $disable_cache = 'false', $use_personalization = 'true', $use_semantic_enhancer = 'true', $use_aso = 'true', $filter_facet_id = null, $navigation = 'false', $sort_fieldname = null, $query_from_suggest = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Result';
        $request = $this->searchUsingGETRequest($channel, $sid, $user_input, $page, $products_per_page, $no_article_number_search, $search_field, $follow_search, $seo_path, $query, $use_asn, $use_found_words, $use_campaigns, $ids_only, $use_keywords, $generate_advisor_tree, $disable_cache, $use_personalization, $use_semantic_enhancer, $use_aso, $filter_facet_id, $navigation, $sort_fieldname, $query_from_suggest, $advisor_status);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation searchUsingGETAsync
     *
     * Search
     *
     * @param string $channel                  channel (required)
     * @param string $sid                      The session id (optional)
     * @param string $user_input               Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param int    $page                     If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param int    $products_per_page        In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param bool   $no_article_number_search Normally an article number search is carried out if the search term matches one or more set formats. You can also use parameters to prevent an article number search from being carried out. (optional)
     * @param string $search_field             Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param int    $follow_search            The parameter followSearch is automatically attached to all follow-up parameter sets of a search result. The parameter must not be passed on initial requests. For internal reasons it must be passed for all follow-up requests (sorting, filtering, etc.). (optional)
     * @param string $seo_path                 See SEO-Enhancer documentation. (optional)
     * @param string $query                    The search term (optional)
     * @param bool   $use_asn                  Whether or not the ASN (after-search navigation) block should be created. (optional, default to true)
     * @param bool   $use_found_words          FACT-Finder is able to return the words that were used to find the data record for the located records. Determining these words takes up CPU time. true &#x3D; generate the search words or false do not generate the search words. (optional, default to false)
     * @param bool   $use_campaigns            true &#x3D; campaigns are evaluated and returned as appropriate, false &#x3D; campaigns are ignored. (optional, default to true)
     * @param bool   $ids_only                 Whether or not to return only record Ids. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param bool   $use_keywords             FACT-Finder is able to generate product keywords that can be used for SEO. true &#x3D; SEO keywords are evaluated and added to the product records, false &#x3D; SEO keywords are not returned. (optional, default to false)
     * @param bool   $generate_advisor_tree    This parameter is ignored by FACT-Finder. It is still present for compatibility. The advisor tree is always generated. (optional, default to true)
     * @param bool   $disable_cache            Whether or not to use the search result cache. true &#x3D; cache is ignored, false &#x3D; cache is used. (optional, default to false)
     * @param bool   $use_personalization      Whether or not personalize the queries. (optional, default to true)
     * @param bool   $use_semantic_enhancer    Whether or not use the semantic enhancer. (optional, default to true)
     * @param bool   $use_aso                  Whether or not use automatic search optimization. (optional, default to true)
     * @param string $filter_facet_id          When a filter parameter is sent to FACT-Finder, the Search engine only returns results that correspond to the filter indicated. The filter value will not register a hit if only a partial match is detected.It is also possible to combine field filters using AND or OR.Moreover you can send a filter that excludes the given criteria. For example, return all products that are NOT red. As with the sort criteria, the name of the parameter is composed of a prefix and a fieldname. Here, however, the prefix is filter.The filter value is provided as the value of the parameter. If you want to apply multiple filters, you need to insert a separator string between each of the filter values. To combine the filters using a logical AND operator the separator is normally 3 underscores (\\_\\_\\_). If you want to use a logical OR operator, the separator is 3 tildes (\\~\\~\\~). Example: Red\\~\\~\\~Blue These separator strings can be configured in config.xml. If you want the filter to exclude specific values, you need to add a prefix before the filter value. By default this is an exclamation mark (!). Example: !Red This string is also configured in config.xml (optional)
     * @param bool   $navigation               FACT-Finder can also replicate your entire shop navigation. No search term is necessary if you want to use this function. You simply pass the corresponding request. (optional, default to false)
     * @param string $sort_fieldname           By default the result that is returned has been sorted for relevance However, you can specify a different sort order here. It is also possible to sort by more than one criterion. Each sort criterion is applied sequentially. The parameter is made up of the prefix sort and the name of the field by which the data should sorted (sortFIELDNAME). The sort direction is indicated by the value asc for ascending order and desc for descending order.If you want to sort by similarity as well in the event that multiple sortings are specified the parameter is sortRelevancy&#x3D;desc. (optional)
     * @param bool   $query_from_suggest       This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param string $advisor_status           For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function searchUsingGETAsync($channel, $sid = null, $user_input = null, $page = null, $products_per_page = null, $no_article_number_search = null, $search_field = null, $follow_search = null, $seo_path = null, $query = null, $use_asn = 'true', $use_found_words = 'false', $use_campaigns = 'true', $ids_only = 'false', $use_keywords = 'false', $generate_advisor_tree = 'true', $disable_cache = 'false', $use_personalization = 'true', $use_semantic_enhancer = 'true', $use_aso = 'true', $filter_facet_id = null, $navigation = 'false', $sort_fieldname = null, $query_from_suggest = null, $advisor_status = null)
    {
        return $this->searchUsingGETAsyncWithHttpInfo($channel, $sid, $user_input, $page, $products_per_page, $no_article_number_search, $search_field, $follow_search, $seo_path, $query, $use_asn, $use_found_words, $use_campaigns, $ids_only, $use_keywords, $generate_advisor_tree, $disable_cache, $use_personalization, $use_semantic_enhancer, $use_aso, $filter_facet_id, $navigation, $sort_fieldname, $query_from_suggest, $advisor_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchUsingGETAsyncWithHttpInfo
     *
     * Search
     *
     * @param string $channel                  channel (required)
     * @param string $sid                      The session id (optional)
     * @param string $user_input               Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param int    $page                     If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param int    $products_per_page        In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param bool   $no_article_number_search Normally an article number search is carried out if the search term matches one or more set formats. You can also use parameters to prevent an article number search from being carried out. (optional)
     * @param string $search_field             Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param int    $follow_search            The parameter followSearch is automatically attached to all follow-up parameter sets of a search result. The parameter must not be passed on initial requests. For internal reasons it must be passed for all follow-up requests (sorting, filtering, etc.). (optional)
     * @param string $seo_path                 See SEO-Enhancer documentation. (optional)
     * @param string $query                    The search term (optional)
     * @param bool   $use_asn                  Whether or not the ASN (after-search navigation) block should be created. (optional, default to true)
     * @param bool   $use_found_words          FACT-Finder is able to return the words that were used to find the data record for the located records. Determining these words takes up CPU time. true &#x3D; generate the search words or false do not generate the search words. (optional, default to false)
     * @param bool   $use_campaigns            true &#x3D; campaigns are evaluated and returned as appropriate, false &#x3D; campaigns are ignored. (optional, default to true)
     * @param bool   $ids_only                 Whether or not to return only record Ids. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param bool   $use_keywords             FACT-Finder is able to generate product keywords that can be used for SEO. true &#x3D; SEO keywords are evaluated and added to the product records, false &#x3D; SEO keywords are not returned. (optional, default to false)
     * @param bool   $generate_advisor_tree    This parameter is ignored by FACT-Finder. It is still present for compatibility. The advisor tree is always generated. (optional, default to true)
     * @param bool   $disable_cache            Whether or not to use the search result cache. true &#x3D; cache is ignored, false &#x3D; cache is used. (optional, default to false)
     * @param bool   $use_personalization      Whether or not personalize the queries. (optional, default to true)
     * @param bool   $use_semantic_enhancer    Whether or not use the semantic enhancer. (optional, default to true)
     * @param bool   $use_aso                  Whether or not use automatic search optimization. (optional, default to true)
     * @param string $filter_facet_id          When a filter parameter is sent to FACT-Finder, the Search engine only returns results that correspond to the filter indicated. The filter value will not register a hit if only a partial match is detected.It is also possible to combine field filters using AND or OR.Moreover you can send a filter that excludes the given criteria. For example, return all products that are NOT red. As with the sort criteria, the name of the parameter is composed of a prefix and a fieldname. Here, however, the prefix is filter.The filter value is provided as the value of the parameter. If you want to apply multiple filters, you need to insert a separator string between each of the filter values. To combine the filters using a logical AND operator the separator is normally 3 underscores (\\_\\_\\_). If you want to use a logical OR operator, the separator is 3 tildes (\\~\\~\\~). Example: Red\\~\\~\\~Blue These separator strings can be configured in config.xml. If you want the filter to exclude specific values, you need to add a prefix before the filter value. By default this is an exclamation mark (!). Example: !Red This string is also configured in config.xml (optional)
     * @param bool   $navigation               FACT-Finder can also replicate your entire shop navigation. No search term is necessary if you want to use this function. You simply pass the corresponding request. (optional, default to false)
     * @param string $sort_fieldname           By default the result that is returned has been sorted for relevance However, you can specify a different sort order here. It is also possible to sort by more than one criterion. Each sort criterion is applied sequentially. The parameter is made up of the prefix sort and the name of the field by which the data should sorted (sortFIELDNAME). The sort direction is indicated by the value asc for ascending order and desc for descending order.If you want to sort by similarity as well in the event that multiple sortings are specified the parameter is sortRelevancy&#x3D;desc. (optional)
     * @param bool   $query_from_suggest       This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param string $advisor_status           For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function searchUsingGETAsyncWithHttpInfo($channel, $sid = null, $user_input = null, $page = null, $products_per_page = null, $no_article_number_search = null, $search_field = null, $follow_search = null, $seo_path = null, $query = null, $use_asn = 'true', $use_found_words = 'false', $use_campaigns = 'true', $ids_only = 'false', $use_keywords = 'false', $generate_advisor_tree = 'true', $disable_cache = 'false', $use_personalization = 'true', $use_semantic_enhancer = 'true', $use_aso = 'true', $filter_facet_id = null, $navigation = 'false', $sort_fieldname = null, $query_from_suggest = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Result';
        $request = $this->searchUsingGETRequest($channel, $sid, $user_input, $page, $products_per_page, $no_article_number_search, $search_field, $follow_search, $seo_path, $query, $use_asn, $use_found_words, $use_campaigns, $ids_only, $use_keywords, $generate_advisor_tree, $disable_cache, $use_personalization, $use_semantic_enhancer, $use_aso, $filter_facet_id, $navigation, $sort_fieldname, $query_from_suggest, $advisor_status);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Operation searchUsingPOST
     *
     * Search with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchRequest $search_request searchRequest (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\Result
     */
    public function searchUsingPOST($search_request)
    {
        list($response) = $this->searchUsingPOSTWithHttpInfo($search_request);

        return $response;
    }

    /**
     * Operation searchUsingPOSTWithHttpInfo
     *
     * Search with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchRequest $search_request searchRequest (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\Result, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingPOSTWithHttpInfo($search_request)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Result';
        $request = $this->searchUsingPOSTRequest($search_request);

        return $this->executeRequest($request, $returnType);
    }

    /**
     * Operation searchUsingPOSTAsync
     *
     * Search with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchRequest $search_request searchRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function searchUsingPOSTAsync($search_request)
    {
        return $this->searchUsingPOSTAsyncWithHttpInfo($search_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchUsingPOSTAsyncWithHttpInfo
     *
     * Search with POST
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchRequest $search_request searchRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function searchUsingPOSTAsyncWithHttpInfo($search_request)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Result';
        $request = $this->searchUsingPOSTRequest($search_request);

        return $this->executeAsyncRequest($request, $returnType);
    }

    /**
     * Create request for operation 'searchUsingGET'
     *
     * @param string $channel                  channel (required)
     * @param string $sid                      The session id (optional)
     * @param string $user_input               Use this parameter to send the characters, the shop user entered until the search query was triggered. (optional)
     * @param int    $page                     If a search result contains many results these will be divided into pages. This limits the amount of data that has to be sent in one go. You can indicate which page should be returned. Page numbering starts at 1. (optional)
     * @param int    $products_per_page        In the FACT-Finder Management Interface you can define how many results will be returned on a page by default. If you prefer another number, you can set it with this parameter. (optional)
     * @param bool   $no_article_number_search Normally an article number search is carried out if the search term matches one or more set formats. You can also use parameters to prevent an article number search from being carried out. (optional)
     * @param string $search_field             Normally FACT-Finder searches all fields defined as searchable. However it is possible to search only one specific field as well. (optional)
     * @param int    $follow_search            The parameter followSearch is automatically attached to all follow-up parameter sets of a search result. The parameter must not be passed on initial requests. For internal reasons it must be passed for all follow-up requests (sorting, filtering, etc.). (optional)
     * @param string $seo_path                 See SEO-Enhancer documentation. (optional)
     * @param string $query                    The search term (optional)
     * @param bool   $use_asn                  Whether or not the ASN (after-search navigation) block should be created. (optional, default to true)
     * @param bool   $use_found_words          FACT-Finder is able to return the words that were used to find the data record for the located records. Determining these words takes up CPU time. true &#x3D; generate the search words or false do not generate the search words. (optional, default to false)
     * @param bool   $use_campaigns            true &#x3D; campaigns are evaluated and returned as appropriate, false &#x3D; campaigns are ignored. (optional, default to true)
     * @param bool   $ids_only                 Whether or not to return only record Ids. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param bool   $use_keywords             FACT-Finder is able to generate product keywords that can be used for SEO. true &#x3D; SEO keywords are evaluated and added to the product records, false &#x3D; SEO keywords are not returned. (optional, default to false)
     * @param bool   $generate_advisor_tree    This parameter is ignored by FACT-Finder. It is still present for compatibility. The advisor tree is always generated. (optional, default to true)
     * @param bool   $disable_cache            Whether or not to use the search result cache. true &#x3D; cache is ignored, false &#x3D; cache is used. (optional, default to false)
     * @param bool   $use_personalization      Whether or not personalize the queries. (optional, default to true)
     * @param bool   $use_semantic_enhancer    Whether or not use the semantic enhancer. (optional, default to true)
     * @param bool   $use_aso                  Whether or not use automatic search optimization. (optional, default to true)
     * @param string $filter_facet_id          When a filter parameter is sent to FACT-Finder, the Search engine only returns results that correspond to the filter indicated. The filter value will not register a hit if only a partial match is detected.It is also possible to combine field filters using AND or OR.Moreover you can send a filter that excludes the given criteria. For example, return all products that are NOT red. As with the sort criteria, the name of the parameter is composed of a prefix and a fieldname. Here, however, the prefix is filter.The filter value is provided as the value of the parameter. If you want to apply multiple filters, you need to insert a separator string between each of the filter values. To combine the filters using a logical AND operator the separator is normally 3 underscores (\\_\\_\\_). If you want to use a logical OR operator, the separator is 3 tildes (\\~\\~\\~). Example: Red\\~\\~\\~Blue These separator strings can be configured in config.xml. If you want the filter to exclude specific values, you need to add a prefix before the filter value. By default this is an exclamation mark (!). Example: !Red This string is also configured in config.xml (optional)
     * @param bool   $navigation               FACT-Finder can also replicate your entire shop navigation. No search term is necessary if you want to use this function. You simply pass the corresponding request. (optional, default to false)
     * @param string $sort_fieldname           By default the result that is returned has been sorted for relevance However, you can specify a different sort order here. It is also possible to sort by more than one criterion. Each sort criterion is applied sequentially. The parameter is made up of the prefix sort and the name of the field by which the data should sorted (sortFIELDNAME). The sort direction is indicated by the value asc for ascending order and desc for descending order.If you want to sort by similarity as well in the event that multiple sortings are specified the parameter is sortRelevancy&#x3D;desc. (optional)
     * @param bool   $query_from_suggest       This parameter indicates that the FACT-Finder query was triggered through a selection from the suggestion list. In this case send the parameter with the value true. (optional)
     * @param string $advisor_status           For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function searchUsingGETRequest($channel, $sid = null, $user_input = null, $page = null, $products_per_page = null, $no_article_number_search = null, $search_field = null, $follow_search = null, $seo_path = null, $query = null, $use_asn = 'true', $use_found_words = 'false', $use_campaigns = 'true', $ids_only = 'false', $use_keywords = 'false', $generate_advisor_tree = 'true', $disable_cache = 'false', $use_personalization = 'true', $use_semantic_enhancer = 'true', $use_aso = 'true', $filter_facet_id = null, $navigation = 'false', $sort_fieldname = null, $query_from_suggest = null, $advisor_status = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling searchUsingGET'
            );
        }

        $resourcePath = '/v1/search/{channel}';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid);
        }
        // query params
        if ($user_input !== null) {
            $queryParams['userInput'] = ObjectSerializer::toQueryValue($user_input);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($products_per_page !== null) {
            $queryParams['productsPerPage'] = ObjectSerializer::toQueryValue($products_per_page);
        }
        // query params
        if ($no_article_number_search !== null) {
            $queryParams['noArticleNumberSearch'] = ObjectSerializer::toQueryValue($no_article_number_search);
        }
        // query params
        if ($search_field !== null) {
            $queryParams['searchField'] = ObjectSerializer::toQueryValue($search_field);
        }
        // query params
        if ($follow_search !== null) {
            $queryParams['followSearch'] = ObjectSerializer::toQueryValue($follow_search);
        }
        // query params
        if ($seo_path !== null) {
            $queryParams['seoPath'] = ObjectSerializer::toQueryValue($seo_path);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if ($use_asn !== null) {
            $queryParams['useAsn'] = ObjectSerializer::toQueryValue($use_asn);
        }
        // query params
        if ($use_found_words !== null) {
            $queryParams['useFoundWords'] = ObjectSerializer::toQueryValue($use_found_words);
        }
        // query params
        if ($use_campaigns !== null) {
            $queryParams['useCampaigns'] = ObjectSerializer::toQueryValue($use_campaigns);
        }
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only);
        }
        // query params
        if ($use_keywords !== null) {
            $queryParams['useKeywords'] = ObjectSerializer::toQueryValue($use_keywords);
        }
        // query params
        if ($generate_advisor_tree !== null) {
            $queryParams['generateAdvisorTree'] = ObjectSerializer::toQueryValue($generate_advisor_tree);
        }
        // query params
        if ($disable_cache !== null) {
            $queryParams['disableCache'] = ObjectSerializer::toQueryValue($disable_cache);
        }
        // query params
        if ($use_personalization !== null) {
            $queryParams['usePersonalization'] = ObjectSerializer::toQueryValue($use_personalization);
        }
        // query params
        if ($use_semantic_enhancer !== null) {
            $queryParams['useSemanticEnhancer'] = ObjectSerializer::toQueryValue($use_semantic_enhancer);
        }
        // query params
        if ($use_aso !== null) {
            $queryParams['useAso'] = ObjectSerializer::toQueryValue($use_aso);
        }
        // query params
        if ($filter_facet_id !== null) {
            $queryParams['filter[FACET-ID]'] = ObjectSerializer::toQueryValue($filter_facet_id);
        }
        // query params
        if ($navigation !== null) {
            $queryParams['navigation'] = ObjectSerializer::toQueryValue($navigation);
        }
        // query params
        if ($sort_fieldname !== null) {
            $queryParams['sort[FIELDNAME]'] = ObjectSerializer::toQueryValue($sort_fieldname);
        }
        // query params
        if ($query_from_suggest !== null) {
            $queryParams['queryFromSuggest'] = ObjectSerializer::toQueryValue($query_from_suggest);
        }
        // query params
        if ($advisor_status !== null) {
            $queryParams['advisorStatus'] = ObjectSerializer::toQueryValue($advisor_status);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = \str_replace(
                '{channel}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        return $this->getQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'searchUsingPOST'
     *
     * @param \Web\FactFinderApi\Client\V1\Model\SearchRequest $search_request searchRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function searchUsingPOSTRequest($search_request)
    {
        // verify the required parameter 'search_request' is set
        if ($search_request === null || (\is_array($search_request) && \count($search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_request when calling searchUsingPOST'
            );
        }

        $resourcePath = '/v1/search';
        $queryParams = [];
        $httpBody = '';
        // body params
        $_tempBody = null;
        if (isset($search_request)) {
            $_tempBody = $search_request;
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Psr7\Request;
use Web\FactFinderApi\Client\ApiException;

/**
 * TrackingApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class TrackingApi extends ApiClient
{
    /**
     * Operation trackCartUsingPOST
     *
     * Track a cart event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackCartUsingPOST(string $channel, $events): void
    {
        $this->trackCartUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackCartUsingPOSTWithHttpInfo
     *
     * Track a cart event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackCartUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackCartUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackCartUsingPOSTAsync
     *
     * Track a cart event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackCartUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackCartUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackCartUsingPOSTAsyncWithHttpInfo
     *
     * Track a cart event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackCartUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackCartUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackCheckoutUsingPOST
     *
     * Track a checkout event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackCheckoutUsingPOST(string $channel, $events): void
    {
        $this->trackCheckoutUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackCheckoutUsingPOSTWithHttpInfo
     *
     * Track a checkout event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackCheckoutUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackCheckoutUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackCheckoutUsingPOSTAsync
     *
     * Track a checkout event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackCheckoutUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackCheckoutUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackCheckoutUsingPOSTAsyncWithHttpInfo
     *
     * Track a checkout event
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackCheckoutUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackCheckoutUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackClickUsingPOST
     *
     * Track a click event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\ClickEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackClickUsingPOST(string $channel, $events): void
    {
        $this->trackClickUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackClickUsingPOSTWithHttpInfo
     *
     * Track a click event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\ClickEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackClickUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackClickUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackClickUsingPOSTAsync
     *
     * Track a click event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\ClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackClickUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackClickUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackClickUsingPOSTAsyncWithHttpInfo
     *
     * Track a click event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\ClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackClickUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackClickUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackFeedbackUsingPOST
     *
     * Track a feedback event
     *
     * @param string                                             $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\FeedbackEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackFeedbackUsingPOST(string $channel, $events): void
    {
        $this->trackFeedbackUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackFeedbackUsingPOSTWithHttpInfo
     *
     * Track a feedback event
     *
     * @param string                                             $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\FeedbackEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackFeedbackUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackFeedbackUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackFeedbackUsingPOSTAsync
     *
     * Track a feedback event
     *
     * @param string                                             $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\FeedbackEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackFeedbackUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackFeedbackUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackFeedbackUsingPOSTAsyncWithHttpInfo
     *
     * Track a feedback event
     *
     * @param string                                             $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\FeedbackEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackFeedbackUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackFeedbackUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackLogUsingPOST
     *
     * Track a log event
     *
     * @param string                                              $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\SearchLogEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackLogUsingPOST(string $channel, $events): void
    {
        $this->trackLogUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackLogUsingPOSTWithHttpInfo
     *
     * Track a log event
     *
     * @param string                                              $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\SearchLogEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackLogUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackLogUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackLogUsingPOSTAsync
     *
     * Track a log event
     *
     * @param string                                              $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\SearchLogEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackLogUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackLogUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackLogUsingPOSTAsyncWithHttpInfo
     *
     * Track a log event
     *
     * @param string                                              $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\SearchLogEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackLogUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackLogUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackLoginUsingPOST
     *
     * Track a login event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\LoginEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackLoginUsingPOST(string $channel, $events): void
    {
        $this->trackLoginUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackLoginUsingPOSTWithHttpInfo
     *
     * Track a login event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\LoginEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackLoginUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackLoginUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackLoginUsingPOSTAsync
     *
     * Track a login event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\LoginEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackLoginUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackLoginUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackLoginUsingPOSTAsyncWithHttpInfo
     *
     * Track a login event
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\LoginEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackLoginUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackLoginUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation trackRecommendationClickUsingPOST
     *
     * Track a recommendation click event
     *
     * @param string                                                        $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecommendationClickEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function trackRecommendationClickUsingPOST(string $channel, $events): void
    {
        $this->trackRecommendationClickUsingPOSTWithHttpInfo($channel, $events);
    }

    /**
     * Operation trackRecommendationClickUsingPOSTWithHttpInfo
     *
     * Track a recommendation click event
     *
     * @param string                                                        $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecommendationClickEvent[] $events  events (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function trackRecommendationClickUsingPOSTWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackRecommendationClickUsingPOSTRequest($channel, $events);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation trackRecommendationClickUsingPOSTAsync
     *
     * Track a recommendation click event
     *
     * @param string                                                        $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecommendationClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackRecommendationClickUsingPOSTAsync(string $channel, $events)
    {
        return $this->trackRecommendationClickUsingPOSTAsyncWithHttpInfo($channel, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trackRecommendationClickUsingPOSTAsyncWithHttpInfo
     *
     * Track a recommendation click event
     *
     * @param string                                                        $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecommendationClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function trackRecommendationClickUsingPOSTAsyncWithHttpInfo(string $channel, $events)
    {
        $request = $this->trackRecommendationClickUsingPOSTRequest($channel, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trackCartUsingPOST'
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackCartUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/cart';
        $queryParams = [];
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, $queryParams, $events);
    }

    /**
     * Create request for operation 'trackCheckoutUsingPOST'
     *
     * @param string                                                   $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\CartOrCheckoutEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackCheckoutUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/checkout';
        $queryParams = [];
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, $queryParams, $events);
    }

    /**
     * Create request for operation 'trackClickUsingPOST'
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\ClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackClickUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/click';
        $queryParams = [];
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, $queryParams, $events);
    }

    /**
     * Create request for operation 'trackFeedbackUsingPOST'
     *
     * @param string                                             $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\FeedbackEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackFeedbackUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/feedback';
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, [], $events);
    }

    /**
     * Create request for operation 'trackLogUsingPOST'
     *
     * @param string                                              $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\SearchLogEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackLogUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/log';
        $queryParams = [];
        $httpBody = '';
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, [], $events);
    }

    /**
     * Create request for operation 'trackLoginUsingPOST'
     *
     * @param string                                          $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\LoginEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackLoginUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/login';

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, [], $events);
    }

    /**
     * Create request for operation 'trackRecommendationClickUsingPOST'
     *
     * @param string                                                        $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecommendationClickEvent[] $events  events (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function trackRecommendationClickUsingPOSTRequest(string $channel, array $events)
    {
        // verify the required parameter 'events' is set
        if (empty($events)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $events when calling trackCartUsingPOST'
            );
        }

        $resourcePath = '/v1/track/{channel}/recommendationClick';
        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, [], $events);
    }
}

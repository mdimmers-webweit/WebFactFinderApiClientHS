<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\Configuration;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * ManagementApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class ManagementApi extends ApiClient
{
    /**
     * Operation importWhatsHotUsingPOST
     *
     * Execute whatshot import(s)
     *
     * @param string[] $channel            channel (optional)
     * @param bool     $send_notifications Flag if the generated reports should be sent afterwards as e-mail notifications (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function importWhatsHotUsingPOST($channel = null, $send_notifications = 'false'): void
    {
        $this->importWhatsHotUsingPOSTWithHttpInfo($channel, $send_notifications);
    }

    /**
     * Operation importWhatsHotUsingPOSTWithHttpInfo
     *
     * Execute whatshot import(s)
     *
     * @param string[] $channel            channel (optional)
     * @param bool     $send_notifications Flag if the generated reports should be sent afterwards as e-mail notifications (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importWhatsHotUsingPOSTWithHttpInfo($channel = null, $send_notifications = 'false')
    {
        $returnType = '';
        $request = $this->importWhatsHotUsingPOSTRequest($channel, $send_notifications);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation importWhatsHotUsingPOSTAsync
     *
     * Execute whatshot import(s)
     *
     * @param string[] $channel            channel (optional)
     * @param bool     $send_notifications Flag if the generated reports should be sent afterwards as e-mail notifications (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function importWhatsHotUsingPOSTAsync($channel = null, $send_notifications = 'false')
    {
        return $this->importWhatsHotUsingPOSTAsyncWithHttpInfo($channel, $send_notifications)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importWhatsHotUsingPOSTAsyncWithHttpInfo
     *
     * Execute whatshot import(s)
     *
     * @param string[] $channel            channel (optional)
     * @param bool     $send_notifications Flag if the generated reports should be sent afterwards as e-mail notifications (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function importWhatsHotUsingPOSTAsyncWithHttpInfo($channel = null, $send_notifications = 'false')
    {
        $returnType = '';
        $request = $this->importWhatsHotUsingPOSTRequest($channel, $send_notifications);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation reloadConfigurationUsingPOST
     *
     * Reload the configuration
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function reloadConfigurationUsingPOST($channel = null): void
    {
        $this->reloadConfigurationUsingPOSTWithHttpInfo($channel);
    }

    /**
     * Operation reloadConfigurationUsingPOSTWithHttpInfo
     *
     * Reload the configuration
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reloadConfigurationUsingPOSTWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->reloadConfigurationUsingPOSTRequest($channel);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation reloadConfigurationUsingPOSTAsync
     *
     * Reload the configuration
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function reloadConfigurationUsingPOSTAsync($channel = null)
    {
        return $this->reloadConfigurationUsingPOSTAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reloadConfigurationUsingPOSTAsyncWithHttpInfo
     *
     * Reload the configuration
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function reloadConfigurationUsingPOSTAsyncWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->reloadConfigurationUsingPOSTRequest($channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importWhatsHotUsingPOST'
     *
     * @param string[] $channel            channel (optional)
     * @param bool     $send_notifications Flag if the generated reports should be sent afterwards as e-mail notifications (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function importWhatsHotUsingPOSTRequest($channel = null, $send_notifications = 'false')
    {
        $resourcePath = '/v1/management/whatshot';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }
        // query params
        if ($send_notifications !== null) {
            $queryParams['sendNotifications'] = ObjectSerializer::toQueryValue($send_notifications);
        }

        return $this->postQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'reloadConfigurationUsingPOST'
     *
     * @param string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function reloadConfigurationUsingPOSTRequest($channel = null)
    {
        $resourcePath = '/v1/management/reloadConfiguration';
        $queryParams = [];
        $httpBody = '';
        // query params
        if (\is_array($channel)) {
            $queryParams['channel'] = $channel;
        } elseif ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel);
        }

        return $this->postQuery($resourcePath, $queryParams);
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

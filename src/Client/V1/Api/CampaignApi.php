<?php declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Client;
use GuzzleHttp6\ClientInterface;
use GuzzleHttp6\Exception\RequestException;
use GuzzleHttp6\Psr7\Request;
use GuzzleHttp6\RequestOptions;
use Web\FactFinderApi\Client\ApiClient;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\Configuration;
use Web\FactFinderApi\Client\HeaderSelector;
use Web\FactFinderApi\Client\ObjectSerializer;

class CampaignApi extends ApiClient
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPageCampaignsUsingGET
     *
     * Get page campaigns
     *
     * @param string $channel        channel (required)
     * @param string $page_id        Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return \Web\FactFinderApi\Client\V1\Model\Campaign[]
     */
    public function getPageCampaignsUsingGET($channel, $page_id, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        list($response) = $this->getPageCampaignsUsingGETWithHttpInfo($channel, $page_id, $ids_only, $sid, $advisor_status);

        return $response;
    }

    /**
     * Operation getPageCampaignsUsingGETWithHttpInfo
     *
     * Get page campaigns
     *
     * @param string $channel        channel (required)
     * @param string $page_id        Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\Campaign[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageCampaignsUsingGETWithHttpInfo($channel, $page_id, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Campaign[]';
        $request = $this->getPageCampaignsUsingGETRequest($channel, $page_id, $ids_only, $sid, $advisor_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $this->handleException($e);
        }
    }

    /**
     * Operation getProductCampaignsUsingGET
     *
     * Get product campaigns
     *
     * @param string $channel        channel (required)
     * @param string $product_number Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return \Web\FactFinderApi\Client\V1\Model\Campaign[]
     */
    public function getProductCampaignsUsingGET($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        list($response) = $this->getProductCampaignsUsingGETWithHttpInfo($channel, $product_number, $ids_only, $sid, $advisor_status);

        return $response;
    }

    /**
     * Operation getProductCampaignsUsingGETWithHttpInfo
     *
     * Get product campaigns
     *
     * @param string $channel        channel (required)
     * @param string $product_number Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\Campaign[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductCampaignsUsingGETWithHttpInfo($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Campaign[]';
        $request = $this->getProductCampaignsUsingGETRequest($channel, $product_number, $ids_only, $sid, $advisor_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $this->handleException($e);
        }
    }

    /**
     * Operation getProductCampaignsUsingGETAsync
     *
     * Get product campaigns
     *
     * @param string $channel        channel (required)
     * @param string $product_number Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getProductCampaignsUsingGETAsync($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        return $this->getProductCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $ids_only, $sid, $advisor_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductCampaignsUsingGETAsyncWithHttpInfo
     *
     * Get product campaigns
     *
     * @param string $channel        channel (required)
     * @param string $product_number Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getProductCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Campaign[]';
        $request = $this->getProductCampaignsUsingGETRequest($channel, $product_number, $ids_only, $sid, $advisor_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getShoppingCartCampaignsUsingGET
     *
     * Get shopping cart campaigns
     *
     * @param string   $channel        channel (required)
     * @param string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param bool     $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string   $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string   $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return \Web\FactFinderApi\Client\V1\Model\Campaign[]
     */
    public function getShoppingCartCampaignsUsingGET($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        list($response) = $this->getShoppingCartCampaignsUsingGETWithHttpInfo($channel, $product_number, $ids_only, $sid, $advisor_status);

        return $response;
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETWithHttpInfo
     *
     * Get shopping cart campaigns
     *
     * @param string   $channel        channel (required)
     * @param string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param bool     $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string   $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string   $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\Campaign[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getShoppingCartCampaignsUsingGETWithHttpInfo($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Campaign[]';
        $request = $this->getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $ids_only, $sid, $advisor_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                    $content = \json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        $returnType,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 401:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 403:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
                case 500:
                    $e->setResponseObject($this->prepareErrorObject($e));
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETAsync
     *
     * Get shopping cart campaigns
     *
     * @param string   $channel        channel (required)
     * @param string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param bool     $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string   $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string   $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getShoppingCartCampaignsUsingGETAsync($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        return $this->getShoppingCartCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $ids_only, $sid, $advisor_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETAsyncWithHttpInfo
     *
     * Get shopping cart campaigns
     *
     * @param string   $channel        channel (required)
     * @param string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param bool     $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string   $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string   $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getShoppingCartCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $returnType = '\Web\FactFinderApi\Client\V1\Model\Campaign[]';
        $request = $this->getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $ids_only, $sid, $advisor_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if (!\in_array($returnType, ['string', 'integer', 'bool'], true)) {
                            $content = \json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPageCampaignsUsingGET'
     *
     * @param string $channel        channel (required)
     * @param string $page_id        Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return Request
     */
    protected function getPageCampaignsUsingGETRequest(string $channel, string $page_id, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        $resourcePath = '/v1/campaign/{channel}/page';
        $queryParams = [];
        $httpBody = '';

        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only);
        }
        // query params
        if ($page_id !== null) {
            $queryParams['pageId'] = ObjectSerializer::toQueryValue($page_id);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid);
        }
        // query params
        if ($advisor_status !== null) {
            $queryParams['advisorStatus'] = ObjectSerializer::toQueryValue($advisor_status);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = \str_replace(
                '{channel}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Create request for operation 'getProductCampaignsUsingGET'
     *
     * @param string $channel        channel (required)
     * @param string $product_number Use this parameter to pass a product ID for which you wish to obtain campaigns. (required)
     * @param bool   $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getProductCampaignsUsingGETRequest($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getProductCampaignsUsingGET'
            );
        }
        // verify the required parameter 'product_number' is set
        if ($product_number === null || (\is_array($product_number) && \count($product_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_number when calling getProductCampaignsUsingGET'
            );
        }

        $resourcePath = '/v1/campaign/{channel}/product';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only);
        }
        // query params
        if ($product_number !== null) {
            $queryParams['productNumber'] = ObjectSerializer::toQueryValue($product_number);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid);
        }
        // query params
        if ($advisor_status !== null) {
            $queryParams['advisorStatus'] = ObjectSerializer::toQueryValue($advisor_status);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = \str_replace(
                '{channel}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'getShoppingCartCampaignsUsingGET'
     *
     * @param string   $channel        channel (required)
     * @param string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param bool     $ids_only       If the value true is passed, then only the record IDs will be returned, streamlining the results. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param string   $sid            This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     * @param string   $advisor_status For specifying the current campaign id and answer path; format: campaignId-answerPath (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $ids_only = 'false', $sid = null, $advisor_status = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (\is_array($channel) && \count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getShoppingCartCampaignsUsingGET'
            );
        }
        // verify the required parameter 'product_number' is set
        if ($product_number === null || (\is_array($product_number) && \count($product_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_number when calling getShoppingCartCampaignsUsingGET'
            );
        }

        $resourcePath = '/v1/campaign/{channel}/shoppingcart';
        $queryParams = [];
        $httpBody = '';
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only);
        }
        // query params
        if (\is_array($product_number)) {
            $queryParams['productNumber'] = $product_number;
        } elseif ($product_number !== null) {
            $queryParams['productNumber'] = ObjectSerializer::toQueryValue($product_number);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid);
        }
        // query params
        if ($advisor_status !== null) {
            $queryParams['advisorStatus'] = ObjectSerializer::toQueryValue($advisor_status);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = \str_replace(
                '{channel}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json'],
            ['application/json']
        );

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;

            if ($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp6\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if (\is_array($httpBody)) {
                    $httpBody = \GuzzleHttp6\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = \array_merge(
            $defaultHeaders,
            $headers
        );

        $query = \GuzzleHttp6\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

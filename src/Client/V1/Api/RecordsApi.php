<?php
declare(strict_types=1);
/*
 * FACT-Finder REST API Client
 * Copyright Â© webweit GmbH (https://www.webweit.de)
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

namespace Web\FactFinderApi\Client\V1\Api;

use GuzzleHttp6\Psr7\Request;
use Web\FactFinderApi\Client\ApiException;
use Web\FactFinderApi\Client\ObjectSerializer;

/**
 * RecordsApi Class Doc Comment
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class RecordsApi extends ApiClient
{
    /**
     * Operation deleteUsingDELETE
     *
     * Delete records
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The ids from the records which should be deleted. (required)
     * @param bool     $save      When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteUsingDELETE(string $channel, $record_id, bool $save = false): void
    {
        $this->deleteUsingDELETEWithHttpInfo($channel, $record_id, $save);
    }

    /**
     * Operation deleteUsingDELETEWithHttpInfo
     *
     * Delete records
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The ids from the records which should be deleted. (required)
     * @param bool     $save      When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUsingDELETEWithHttpInfo(string $channel, $record_id, bool $save = false)
    {
        $request = $this->deleteUsingDELETERequest($channel, $record_id, $save);

        return $this->executeRequest($request, '\Web\FactFinderApi\Client\V4\Model\Campaign[]');
    }

    /**
     * Operation deleteUsingDELETEAsync
     *
     * Delete records
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The ids from the records which should be deleted. (required)
     * @param bool     $save      When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function deleteUsingDELETEAsync(string $channel, $record_id, bool $save = false)
    {
        return $this->deleteUsingDELETEAsyncWithHttpInfo($channel, $record_id, $save)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUsingDELETEAsyncWithHttpInfo
     *
     * Delete records
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The ids from the records which should be deleted. (required)
     * @param bool     $save      When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function deleteUsingDELETEAsyncWithHttpInfo(string $channel, $record_id, bool $save = false)
    {
        $request = $this->deleteUsingDELETERequest($channel, $record_id, $save);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation getRecordsUsingGET
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The record ids of the records which should be returned (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Web\FactFinderApi\Client\V1\Model\RecordWithId[]
     */
    public function getRecordsUsingGET(string $channel, $record_id)
    {
        list($response) = $this->getRecordsUsingGETWithHttpInfo($channel, $record_id);

        return $response;
    }

    /**
     * Operation getRecordsUsingGETWithHttpInfo
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The record ids of the records which should be returned (required)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Web\FactFinderApi\Client\V1\Model\RecordWithId[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordsUsingGETWithHttpInfo(string $channel, $record_id)
    {
        $request = $this->getRecordsUsingGETRequest($channel, $record_id);

        return $this->executeRequest($request, '\Web\FactFinderApi\Client\V1\Model\RecordWithId[]');
    }

    /**
     * Operation getRecordsUsingGETAsync
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The record ids of the records which should be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getRecordsUsingGETAsync(string $channel, $record_id)
    {
        return $this->getRecordsUsingGETAsyncWithHttpInfo($channel, $record_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordsUsingGETAsyncWithHttpInfo
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The record ids of the records which should be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function getRecordsUsingGETAsyncWithHttpInfo(string $channel, $record_id)
    {
        $request = $this->getRecordsUsingGETRequest($channel, $record_id);

        return $this->executeAsyncRequest($request, '\Web\FactFinderApi\Client\V1\Model\RecordWithId[]');
    }

    /**
     * Operation insertRecordsUsingPOST
     *
     * Insert records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be inserted (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function insertRecordsUsingPOST(string $channel, $records, bool $save = false): void
    {
        $this->insertRecordsUsingPOSTWithHttpInfo($channel, $records, $save);
    }

    /**
     * Operation insertRecordsUsingPOSTWithHttpInfo
     *
     * Insert records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be inserted (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function insertRecordsUsingPOSTWithHttpInfo(string $channel, $records, bool $save = false)
    {
        $request = $this->insertRecordsUsingPOSTRequest($channel, $records, $save);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation insertRecordsUsingPOSTAsync
     *
     * Insert records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be inserted (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function insertRecordsUsingPOSTAsync(string $channel, $records, bool $save = false)
    {
        return $this->insertRecordsUsingPOSTAsyncWithHttpInfo($channel, $records, $save)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation insertRecordsUsingPOSTAsyncWithHttpInfo
     *
     * Insert records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be inserted (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function insertRecordsUsingPOSTAsyncWithHttpInfo(string $channel, $records, bool $save = false)
    {
        $request = $this->insertRecordsUsingPOSTRequest($channel, $records, $save);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation updateUsingPUT
     *
     * Update records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be updated (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function updateUsingPUT(string $channel, $records, bool $save = false): void
    {
        $this->updateUsingPUTWithHttpInfo($channel, $records, $save);
    }

    /**
     * Operation updateUsingPUTWithHttpInfo
     *
     * Update records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be updated (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \Web\FactFinderApi\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUsingPUTWithHttpInfo(string $channel, $records, bool $save = false)
    {
        $request = $this->updateUsingPUTRequest($channel, $records, $save);

        return $this->executeEmptyRequest($request);
    }

    /**
     * Operation updateUsingPUTAsync
     *
     * Update records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be updated (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function updateUsingPUTAsync(string $channel, $records, bool $save = false)
    {
        return $this->updateUsingPUTAsyncWithHttpInfo($channel, $records, $save)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUsingPUTAsyncWithHttpInfo
     *
     * Update records
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be updated (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Promise\PromiseInterface
     */
    public function updateUsingPUTAsyncWithHttpInfo(string $channel, $records, bool $save = false)
    {
        $request = $this->updateUsingPUTRequest($channel, $records, $save);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        \sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUsingDELETE'
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The ids from the records which should be deleted. (required)
     * @param bool     $save      When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function deleteUsingDELETERequest(string $channel, array $record_id, bool $save = false)
    {
        // verify the required parameter 'record_id' is set
        if (empty($record_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling getRecordsUsingGET'
            );
        }

        $resourcePath = '/v1/records/{channel}';
        $queryParams = [];
        // query params

        $queryParams['recordId'] = $record_id;
        // query params
        if ($save !== null) {
            $queryParams['save'] = ObjectSerializer::toQueryValue($save);
        }

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->deleteQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'getRecordsUsingGET'
     *
     * @param string   $channel   channel (required)
     * @param string[] $record_id The record ids of the records which should be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function getRecordsUsingGETRequest(string $channel, array $record_id)
    {
        // verify the required parameter 'record_id' is set
        if (empty($record_id)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_id when calling getRecordsUsingGET'
            );
        }

        $resourcePath = '/v1/records/{channel}';
        $queryParams = [];
        $httpBody = '';
        // query params
        $queryParams['recordId'] = $record_id;

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->getQuery($resourcePath, $queryParams);
    }

    /**
     * Create request for operation 'insertRecordsUsingPOST'
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be inserted (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function insertRecordsUsingPOSTRequest(string $channel, array $records, bool $save = false)
    {
        // verify the required parameter 'records' is set
        if (empty($records)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records when calling insertRecordsUsingPOST'
            );
        }

        $resourcePath = '/v1/records/{channel}';
        $queryParams = [];
        // query params
        if ($save !== null) {
            $queryParams['save'] = ObjectSerializer::toQueryValue($save);
        }

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->postQuery($resourcePath, $queryParams, $records);
    }

    /**
     * Create request for operation 'updateUsingPUT'
     *
     * @param string                                            $channel channel (required)
     * @param \Web\FactFinderApi\Client\V1\Model\RecordWithId[] $records The records which should be updated (required)
     * @param bool                                              $save    When true: the database will also be saved after the change. If the database persistence is not ensured by saving, changes would be lost when restarting a server or the application. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp6\Psr7\Request
     */
    protected function updateUsingPUTRequest(string $channel, array $records, bool $save = false)
    {
        // verify the required parameter 'records' is set
        if (empty($records)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records when calling insertRecordsUsingPOST'
            );
        }

        $resourcePath = '/v1/records/{channel}';
        $queryParams = [];
        // query params
        if ($save !== null) {
            $queryParams['save'] = ObjectSerializer::toQueryValue($save);
        }

        // path params
        $resourcePath = $this->addChannelToResourcePath($channel, $resourcePath);

        return $this->putQuery($resourcePath, $queryParams, $records);
    }
}
